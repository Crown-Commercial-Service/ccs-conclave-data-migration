/*
 * CCS Central Identity Index Service (CII)
 * This is an example CCS Central Identity Index (CII) Service API.
 *
 * OpenAPI spec version: 1.0.4
 * Contact: apiteam@crowncommercial.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.cii.api;

import uk.gov.ccs.swagger.cii.ApiCallback;
import uk.gov.ccs.swagger.cii.ApiClient;
import uk.gov.ccs.swagger.cii.ApiException;
import uk.gov.ccs.swagger.cii.ApiResponse;
import uk.gov.ccs.swagger.cii.Configuration;
import uk.gov.ccs.swagger.cii.Pair;
import uk.gov.ccs.swagger.cii.ProgressRequestBody;
import uk.gov.ccs.swagger.cii.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.cii.model.IdentifierPlusId;
import uk.gov.ccs.swagger.cii.model.Identities;
import uk.gov.ccs.swagger.cii.model.IdentitiesAll;
import uk.gov.ccs.swagger.cii.model.OrgMigration;
import uk.gov.ccs.swagger.cii.model.OrganisationId;
import uk.gov.ccs.swagger.cii.model.Organisations;
import uk.gov.ccs.swagger.cii.model.SchemesDescription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentitiesApi {
    private ApiClient apiClient;

    public IdentitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for appDeleteallschmes
     * @param organisationId Search term (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appDeleteallschmesCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/{organisation-id}"
            .replaceAll("\\{" + "organisation-id" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "cii_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appDeleteallschmesValidateBeforeCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appDeleteallschmes(Async)");
        }
        
        com.squareup.okhttp.Call call = appDeleteallschmesCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove ALL scheme registration from an organisation
     * 
     * @param organisationId Search term (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void appDeleteallschmes(String organisationId) throws ApiException {
        appDeleteallschmesWithHttpInfo(organisationId);
    }

    /**
     * Remove ALL scheme registration from an organisation
     * 
     * @param organisationId Search term (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> appDeleteallschmesWithHttpInfo(String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = appDeleteallschmesValidateBeforeCall(organisationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove ALL scheme registration from an organisation (asynchronously)
     * 
     * @param organisationId Search term (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appDeleteallschmesAsync(String organisationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appDeleteallschmesValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for appGetAllSchemeByOrg
     * @param organisationId Search term (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appGetAllSchemeByOrgCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/{organisation-id}/all"
            .replaceAll("\\{" + "organisation-id" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appGetAllSchemeByOrgValidateBeforeCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appGetAllSchemeByOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appGetAllSchemeByOrgCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all the schemes associated with the organisation specified (includes hidden schemes)
     * 
     * @param organisationId Search term (required)
     * @return List&lt;IdentitiesAll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IdentitiesAll> appGetAllSchemeByOrg(String organisationId) throws ApiException {
        ApiResponse<List<IdentitiesAll>> resp = appGetAllSchemeByOrgWithHttpInfo(organisationId);
        return resp.getData();
    }

    /**
     * Returns all the schemes associated with the organisation specified (includes hidden schemes)
     * 
     * @param organisationId Search term (required)
     * @return ApiResponse&lt;List&lt;IdentitiesAll&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IdentitiesAll>> appGetAllSchemeByOrgWithHttpInfo(String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = appGetAllSchemeByOrgValidateBeforeCall(organisationId, null, null);
        Type localVarReturnType = new TypeToken<List<IdentitiesAll>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all the schemes associated with the organisation specified (includes hidden schemes) (asynchronously)
     * 
     * @param organisationId Search term (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appGetAllSchemeByOrgAsync(String organisationId, final ApiCallback<List<IdentitiesAll>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appGetAllSchemeByOrgValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IdentitiesAll>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appGetSchemeByOrg
     * @param organisationId Search term (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appGetSchemeByOrgCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/{organisation-id}"
            .replaceAll("\\{" + "organisation-id" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appGetSchemeByOrgValidateBeforeCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appGetSchemeByOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appGetSchemeByOrgCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all the schemes associated with the organisation specified
     * 
     * @param organisationId Search term (required)
     * @return List&lt;Identities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Identities> appGetSchemeByOrg(String organisationId) throws ApiException {
        ApiResponse<List<Identities>> resp = appGetSchemeByOrgWithHttpInfo(organisationId);
        return resp.getData();
    }

    /**
     * Returns all the schemes associated with the organisation specified
     * 
     * @param organisationId Search term (required)
     * @return ApiResponse&lt;List&lt;Identities&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Identities>> appGetSchemeByOrgWithHttpInfo(String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = appGetSchemeByOrgValidateBeforeCall(organisationId, null, null);
        Type localVarReturnType = new TypeToken<List<Identities>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all the schemes associated with the organisation specified (asynchronously)
     * 
     * @param organisationId Search term (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appGetSchemeByOrgAsync(String organisationId, final ApiCallback<List<Identities>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appGetSchemeByOrgValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Identities>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appGetscheme
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appGetschemeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/schemes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appGetschemeValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = appGetschemeCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns a list of all available scheme providers
     * 
     * @return List&lt;SchemesDescription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SchemesDescription> appGetscheme() throws ApiException {
        ApiResponse<List<SchemesDescription>> resp = appGetschemeWithHttpInfo();
        return resp.getData();
    }

    /**
     * Returns a list of all available scheme providers
     * 
     * @return ApiResponse&lt;List&lt;SchemesDescription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SchemesDescription>> appGetschemeWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = appGetschemeValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<SchemesDescription>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of all available scheme providers (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appGetschemeAsync(final ApiCallback<List<SchemesDescription>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appGetschemeValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SchemesDescription>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appGetschemeidentifiers
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appGetschemeidentifiersCall(String schemeId, String identifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/schemes/{scheme-id}/identifiers/{identifier-id}"
            .replaceAll("\\{" + "scheme-id" + "\\}", apiClient.escapeString(schemeId.toString()))
            .replaceAll("\\{" + "identifier-id" + "\\}", apiClient.escapeString(identifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appGetschemeidentifiersValidateBeforeCall(String schemeId, String identifierId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling appGetschemeidentifiers(Async)");
        }
        // verify the required parameter 'identifierId' is set
        if (identifierId == null) {
            throw new ApiException("Missing the required parameter 'identifierId' when calling appGetschemeidentifiers(Async)");
        }
        
        com.squareup.okhttp.Call call = appGetschemeidentifiersCall(schemeId, identifierId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns scheme (identity) data from the user selected external registry  (e.g. DUNS) and any additional schemes this external registry knows about. This method also checks if the identities have already been used by other organisations.
     * 
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @return List&lt;Organisations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Organisations> appGetschemeidentifiers(String schemeId, String identifierId) throws ApiException {
        ApiResponse<List<Organisations>> resp = appGetschemeidentifiersWithHttpInfo(schemeId, identifierId);
        return resp.getData();
    }

    /**
     * Returns scheme (identity) data from the user selected external registry  (e.g. DUNS) and any additional schemes this external registry knows about. This method also checks if the identities have already been used by other organisations.
     * 
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @return ApiResponse&lt;List&lt;Organisations&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Organisations>> appGetschemeidentifiersWithHttpInfo(String schemeId, String identifierId) throws ApiException {
        com.squareup.okhttp.Call call = appGetschemeidentifiersValidateBeforeCall(schemeId, identifierId, null, null);
        Type localVarReturnType = new TypeToken<List<Organisations>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns scheme (identity) data from the user selected external registry  (e.g. DUNS) and any additional schemes this external registry knows about. This method also checks if the identities have already been used by other organisations. (asynchronously)
     * 
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appGetschemeidentifiersAsync(String schemeId, String identifierId, final ApiCallback<List<Organisations>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appGetschemeidentifiersValidateBeforeCall(schemeId, identifierId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Organisations>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appGetschemeidentifiersMg
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @param organisationId id 19700101T000000Z (optional field) (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appGetschemeidentifiersMgCall(String schemeId, String identifierId, String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/{organisation-id}/schemes/{scheme-id}/identifiers/{identifier-id}"
            .replaceAll("\\{" + "scheme-id" + "\\}", apiClient.escapeString(schemeId.toString()))
            .replaceAll("\\{" + "identifier-id" + "\\}", apiClient.escapeString(identifierId.toString()))
            .replaceAll("\\{" + "organisation-id" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appGetschemeidentifiersMgValidateBeforeCall(String schemeId, String identifierId, String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling appGetschemeidentifiersMg(Async)");
        }
        // verify the required parameter 'identifierId' is set
        if (identifierId == null) {
            throw new ApiException("Missing the required parameter 'identifierId' when calling appGetschemeidentifiersMg(Async)");
        }
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appGetschemeidentifiersMg(Async)");
        }
        
        com.squareup.okhttp.Call call = appGetschemeidentifiersMgCall(schemeId, identifierId, organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Returns all identities registered against given organisation
     * 
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @param organisationId id 19700101T000000Z (optional field) (required)
     * @return List&lt;Identities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Identities> appGetschemeidentifiersMg(String schemeId, String identifierId, String organisationId) throws ApiException {
        ApiResponse<List<Identities>> resp = appGetschemeidentifiersMgWithHttpInfo(schemeId, identifierId, organisationId);
        return resp.getData();
    }

    /**
     * Returns all identities registered against given organisation
     * 
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @param organisationId id 19700101T000000Z (optional field) (required)
     * @return ApiResponse&lt;List&lt;Identities&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Identities>> appGetschemeidentifiersMgWithHttpInfo(String schemeId, String identifierId, String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = appGetschemeidentifiersMgValidateBeforeCall(schemeId, identifierId, organisationId, null, null);
        Type localVarReturnType = new TypeToken<List<Identities>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns all identities registered against given organisation (asynchronously)
     * 
     * @param schemeId scheme code e.g. GB-COH (required)
     * @param identifierId id e.g. 05606089 (required)
     * @param organisationId id 19700101T000000Z (optional field) (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appGetschemeidentifiersMgAsync(String schemeId, String identifierId, String organisationId, final ApiCallback<List<Identities>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appGetschemeidentifiersMgValidateBeforeCall(schemeId, identifierId, organisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Identities>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appMigrateOrg
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appMigrateOrgCall(String scheme, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/schemes/{scheme}/identifiers/{id}"
            .replaceAll("\\{" + "scheme" + "\\}", apiClient.escapeString(scheme.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appMigrateOrgValidateBeforeCall(String scheme, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scheme' is set
        if (scheme == null) {
            throw new ApiException("Missing the required parameter 'scheme' when calling appMigrateOrg(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appMigrateOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appMigrateOrgCall(scheme, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * A generic endpoint for regisering organisations from data file supplied by individual CCS platforms and services.
     * 
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @return OrgMigration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrgMigration appMigrateOrg(String scheme, String id) throws ApiException {
        ApiResponse<OrgMigration> resp = appMigrateOrgWithHttpInfo(scheme, id);
        return resp.getData();
    }

    /**
     * A generic endpoint for regisering organisations from data file supplied by individual CCS platforms and services.
     * 
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @return ApiResponse&lt;OrgMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrgMigration> appMigrateOrgWithHttpInfo(String scheme, String id) throws ApiException {
        com.squareup.okhttp.Call call = appMigrateOrgValidateBeforeCall(scheme, id, null, null);
        Type localVarReturnType = new TypeToken<OrgMigration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A generic endpoint for regisering organisations from data file supplied by individual CCS platforms and services. (asynchronously)
     * 
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appMigrateOrgAsync(String scheme, String id, final ApiCallback<OrgMigration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appMigrateOrgValidateBeforeCall(scheme, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrgMigration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appPostOrg
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appPostOrgCall(Identities body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/identities/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "cii_auth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appPostOrgValidateBeforeCall(Identities body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = appPostOrgCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Register a new organisation with the organisation id supplied by the user scheme and approved by the user
     * 
     * @param body  (optional)
     * @return List&lt;OrganisationId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrganisationId> appPostOrg(Identities body) throws ApiException {
        ApiResponse<List<OrganisationId>> resp = appPostOrgWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Register a new organisation with the organisation id supplied by the user scheme and approved by the user
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;OrganisationId&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrganisationId>> appPostOrgWithHttpInfo(Identities body) throws ApiException {
        com.squareup.okhttp.Call call = appPostOrgValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<List<OrganisationId>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Register a new organisation with the organisation id supplied by the user scheme and approved by the user (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appPostOrgAsync(Identities body, final ApiCallback<List<OrganisationId>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appPostOrgValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrganisationId>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for appPutOrg
     * @param organisationId Search term (required)
     * @param schemeId Search term (required)
     * @param identifierId Search term (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appPutOrgCall(String organisationId, String schemeId, String identifierId, IdentifierPlusId body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/{organisation-id}/schemes/{scheme-id}/identifiers/{identifier-id}"
            .replaceAll("\\{" + "organisation-id" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "scheme-id" + "\\}", apiClient.escapeString(schemeId.toString()))
            .replaceAll("\\{" + "identifier-id" + "\\}", apiClient.escapeString(identifierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "cii_auth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appPutOrgValidateBeforeCall(String organisationId, String schemeId, String identifierId, IdentifierPlusId body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appPutOrg(Async)");
        }
        // verify the required parameter 'schemeId' is set
        if (schemeId == null) {
            throw new ApiException("Missing the required parameter 'schemeId' when calling appPutOrg(Async)");
        }
        // verify the required parameter 'identifierId' is set
        if (identifierId == null) {
            throw new ApiException("Missing the required parameter 'identifierId' when calling appPutOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appPutOrgCall(organisationId, schemeId, identifierId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add additional scheme to an organisation if approved by user (make log if duplicate attempt)
     * 
     * @param organisationId Search term (required)
     * @param schemeId Search term (required)
     * @param identifierId Search term (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void appPutOrg(String organisationId, String schemeId, String identifierId, IdentifierPlusId body) throws ApiException {
        appPutOrgWithHttpInfo(organisationId, schemeId, identifierId, body);
    }

    /**
     * Add additional scheme to an organisation if approved by user (make log if duplicate attempt)
     * 
     * @param organisationId Search term (required)
     * @param schemeId Search term (required)
     * @param identifierId Search term (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> appPutOrgWithHttpInfo(String organisationId, String schemeId, String identifierId, IdentifierPlusId body) throws ApiException {
        com.squareup.okhttp.Call call = appPutOrgValidateBeforeCall(organisationId, schemeId, identifierId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add additional scheme to an organisation if approved by user (make log if duplicate attempt) (asynchronously)
     * 
     * @param organisationId Search term (required)
     * @param schemeId Search term (required)
     * @param identifierId Search term (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appPutOrgAsync(String organisationId, String schemeId, String identifierId, IdentifierPlusId body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appPutOrgValidateBeforeCall(organisationId, schemeId, identifierId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for appRemoveIdFrmOrg
     * @param organisationId Scheme Object (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appRemoveIdFrmOrgCall(IdentifierPlusId organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (organisationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organisation-id", organisationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "cii_auth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appRemoveIdFrmOrgValidateBeforeCall(IdentifierPlusId organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appRemoveIdFrmOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appRemoveIdFrmOrgCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove an identity  from an existing organisation
     * 
     * @param organisationId Scheme Object (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void appRemoveIdFrmOrg(IdentifierPlusId organisationId) throws ApiException {
        appRemoveIdFrmOrgWithHttpInfo(organisationId);
    }

    /**
     * Remove an identity  from an existing organisation
     * 
     * @param organisationId Scheme Object (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> appRemoveIdFrmOrgWithHttpInfo(IdentifierPlusId organisationId) throws ApiException {
        com.squareup.okhttp.Call call = appRemoveIdFrmOrgValidateBeforeCall(organisationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove an identity  from an existing organisation (asynchronously)
     * 
     * @param organisationId Scheme Object (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appRemoveIdFrmOrgAsync(IdentifierPlusId organisationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appRemoveIdFrmOrgValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
