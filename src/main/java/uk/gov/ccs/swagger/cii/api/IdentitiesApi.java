/*
 * CCS Central Identity Index Service (CII)
 * This is an example CCS Central Identity Index (CII) Service API.
 *
 * OpenAPI spec version: 1.0.4
 * Contact: apiteam@crowncommercial.gov.uk
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.cii.api;

import uk.gov.ccs.swagger.cii.ApiCallback;
import uk.gov.ccs.swagger.cii.ApiClient;
import uk.gov.ccs.swagger.cii.ApiException;
import uk.gov.ccs.swagger.cii.ApiResponse;
import uk.gov.ccs.swagger.cii.Configuration;
import uk.gov.ccs.swagger.cii.Pair;
import uk.gov.ccs.swagger.cii.ProgressRequestBody;
import uk.gov.ccs.swagger.cii.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.cii.model.OrgMigration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentitiesApi {
    private ApiClient apiClient;

    public IdentitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentitiesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for appMigrateOrg
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appMigrateOrgCall(String scheme, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/schemes/{scheme}/identifiers/{id}"
            .replaceAll("\\{" + "scheme" + "\\}", apiClient.escapeString(scheme.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Build call for appDeleteOrg
     * @param organisationId organisationId is the organisation's unique id, that is used to identify them
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call appDeleteOrgCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/identities/organisations/{organisationId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appMigrateOrgValidateBeforeCall(String scheme, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'scheme' is set
        if (scheme == null) {
            throw new ApiException("Missing the required parameter 'scheme' when calling appMigrateOrg(Async)");
        }
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling appMigrateOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appMigrateOrgCall(scheme, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call appDeleteOrgValidateBeforeCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling appDeleteOrg(Async)");
        }
        
        com.squareup.okhttp.Call call = appDeleteOrgCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * A generic endpoint for regisering organisations from data file supplied by individual CCS platforms and services.
     * 
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @return OrgMigration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrgMigration appMigrateOrg(String scheme, String id) throws ApiException {
        ApiResponse<OrgMigration> resp = appMigrateOrgWithHttpInfo(scheme, id);
        return resp.getData();
    }

    /**
     * A generic endpoint for deleting organisations from data file supplied by individual CCS platforms and services.
     * 
     * @param organisationId organisationId is the organisation's unique id, that is used to identify them
     * @return OrgDelete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrgMigration appDeleteOrg(String organisationId) throws ApiException {
        ApiResponse<OrgMigration> resp = appDeleteOrgWithHttpInfo(organisationId);
        return resp.getData();
    }

    /**
     * A generic endpoint for regisering organisations from data file supplied by individual CCS platforms and services.
     * 
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @return ApiResponse&lt;OrgMigration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrgMigration> appMigrateOrgWithHttpInfo(String scheme, String id) throws ApiException {
        com.squareup.okhttp.Call call = appMigrateOrgValidateBeforeCall(scheme, id, null, null);
        Type localVarReturnType = new TypeToken<OrgMigration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A generic endpoint for deleting organisations from data file supplied by individual CCS platforms and services.
     * 
     * @param organisationId organisationId is the organisation's unique id, that is used to identify them
     * @return ApiResponse&lt;OrgDelete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrgMigration> appDeleteOrgWithHttpInfo(String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = appDeleteOrgValidateBeforeCall(organisationId, null, null);
        Type localVarReturnType = new TypeToken<OrgMigration>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * A generic endpoint for regisering organisations from data file supplied by individual CCS platforms and services. (asynchronously)
     * 
     * @param scheme scheme code is the code to the identifier for e.g. GB-COH is Companies House and US-DUNS is Duns and Bradstreet (required)
     * @param id scheme ID for scheme 05606089 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appMigrateOrgAsync(String scheme, String id, final ApiCallback<OrgMigration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appMigrateOrgValidateBeforeCall(scheme, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrgMigration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }

    /**
     * A generic endpoint for deleting organisations from data file supplied by individual CCS platforms and services. (asynchronously)
     * 
     * @param organisationId organisationId is the organisation's unique id, that is used to identify them
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appDeleteOrgAsync(String organisationId, final ApiCallback<OrgMigration> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appDeleteOrgValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrgMigration>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
