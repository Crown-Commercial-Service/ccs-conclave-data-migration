/*
 * CcsSso.UserApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.UserAccessRolePendingDetails;
import uk.gov.ccs.swagger.sso.model.UserAccessRolePendingRequestDetails;
import uk.gov.ccs.swagger.sso.model.UserAccessRolePendingTokenDetails;
import uk.gov.ccs.swagger.sso.model.UserAccessServiceRoleGroupPendingTokenDetails;
import uk.gov.ccs.swagger.sso.model.UserPendingRoleStaus;
import uk.gov.ccs.swagger.sso.model.UserProfileEditRequestInfo;
import uk.gov.ccs.swagger.sso.model.UserRoleApprovalEditRequest;
import uk.gov.ccs.swagger.sso.model.UserServiceRoleGroupPendingDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserRolesApprovalApi {
    private ApiClient apiClient;

    public UserRolesApprovalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserRolesApprovalApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for userProfileApprovalRolesDelete
     * @param userId  (optional)
     * @param roles  (optional)
     * @param groupId  (optional)
     * @param status  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesDeleteCall(String userId, String roles, Integer groupId, Integer status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));
        if (roles != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("roles", roles));
        if (groupId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("groupId", groupId));
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalRolesDeleteValidateBeforeCall(String userId, String roles, Integer groupId, Integer status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalRolesDeleteCall(userId, roles, groupId, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete user roles which are in pending for approval
     * approval/roles               Sample request:                               DELETE /user-profile/approval/roles?user-id&#x3D;user@mail.com,roles&#x3D;1,2,groupId&#x3D;1
     * @param userId  (optional)
     * @param roles  (optional)
     * @param groupId  (optional)
     * @param status  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfileApprovalRolesDelete(String userId, String roles, Integer groupId, Integer status) throws ApiException {
        userProfileApprovalRolesDeleteWithHttpInfo(userId, roles, groupId, status);
    }

    /**
     * Delete user roles which are in pending for approval
     * approval/roles               Sample request:                               DELETE /user-profile/approval/roles?user-id&#x3D;user@mail.com,roles&#x3D;1,2,groupId&#x3D;1
     * @param userId  (optional)
     * @param roles  (optional)
     * @param groupId  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfileApprovalRolesDeleteWithHttpInfo(String userId, String roles, Integer groupId, Integer status) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalRolesDeleteValidateBeforeCall(userId, roles, groupId, status, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete user roles which are in pending for approval (asynchronously)
     * approval/roles               Sample request:                               DELETE /user-profile/approval/roles?user-id&#x3D;user@mail.com,roles&#x3D;1,2,groupId&#x3D;1
     * @param userId  (optional)
     * @param roles  (optional)
     * @param groupId  (optional)
     * @param status  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesDeleteAsync(String userId, String roles, Integer groupId, Integer status, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalRolesDeleteValidateBeforeCall(userId, roles, groupId, status, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalRolesGet
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesGetCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalRolesGetValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalRolesGetCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve user all roles which are in pending for approval
     * Sample request:                    GET /user-profile/approval/roles/pending?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return UserAccessRolePendingDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccessRolePendingDetails userProfileApprovalRolesGet(String userId) throws ApiException {
        ApiResponse<UserAccessRolePendingDetails> resp = userProfileApprovalRolesGetWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Retrieve user all roles which are in pending for approval
     * Sample request:                    GET /user-profile/approval/roles/pending?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;UserAccessRolePendingDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccessRolePendingDetails> userProfileApprovalRolesGetWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalRolesGetValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserAccessRolePendingDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve user all roles which are in pending for approval (asynchronously)
     * Sample request:                    GET /user-profile/approval/roles/pending?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesGetAsync(String userId, final ApiCallback<UserAccessRolePendingDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalRolesGetValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccessRolePendingDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalRolesPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesPostCall(UserProfileEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalRolesPostValidateBeforeCall(UserProfileEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalRolesPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create user roles which required approval
     * Sample request:                    POST /user-profile/approval/roles      {         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;roleIds\&quot;: { 1, 2 },            \&quot;groupId\&quot;: null         }      }
     * @param body  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean userProfileApprovalRolesPost(UserProfileEditRequestInfo body) throws ApiException {
        ApiResponse<Boolean> resp = userProfileApprovalRolesPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Allows a user to create user roles which required approval
     * Sample request:                    POST /user-profile/approval/roles      {         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;roleIds\&quot;: { 1, 2 },            \&quot;groupId\&quot;: null         }      }
     * @param body  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> userProfileApprovalRolesPostWithHttpInfo(UserProfileEditRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalRolesPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create user roles which required approval (asynchronously)
     * Sample request:                    POST /user-profile/approval/roles      {         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;roleIds\&quot;: { 1, 2 },            \&quot;groupId\&quot;: null         }      }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesPostAsync(UserProfileEditRequestInfo body, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalRolesPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalRolesPut
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesPutCall(UserRoleApprovalEditRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalRolesPutValidateBeforeCall(UserRoleApprovalEditRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalRolesPutCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update roles approval pending status
     * Sample request:                    PUT /user-profile/approval/roles/?pendingRoleIds&#x3D;1,status&#x3D;0/1/2/3/4
     * @param body  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean userProfileApprovalRolesPut(UserRoleApprovalEditRequest body) throws ApiException {
        ApiResponse<Boolean> resp = userProfileApprovalRolesPutWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update roles approval pending status
     * Sample request:                    PUT /user-profile/approval/roles/?pendingRoleIds&#x3D;1,status&#x3D;0/1/2/3/4
     * @param body  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> userProfileApprovalRolesPutWithHttpInfo(UserRoleApprovalEditRequest body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalRolesPutValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update roles approval pending status (asynchronously)
     * Sample request:                    PUT /user-profile/approval/roles/?pendingRoleIds&#x3D;1,status&#x3D;0/1/2/3/4
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalRolesPutAsync(UserRoleApprovalEditRequest body, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalRolesPutValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalServiceRoleGroupVerificationGet
     * @param token  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalServiceRoleGroupVerificationGetCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/service-role-group/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalServiceRoleGroupVerificationGetValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalServiceRoleGroupVerificationGetCall(token, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate role approval token and return serice role group details
     * Sample request:                    GET /user-profile/approval/service-role-group/verification?token&#x3D;encryptedtoken
     * @param token  (optional)
     * @return UserAccessServiceRoleGroupPendingTokenDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccessServiceRoleGroupPendingTokenDetails userProfileApprovalServiceRoleGroupVerificationGet(String token) throws ApiException {
        ApiResponse<UserAccessServiceRoleGroupPendingTokenDetails> resp = userProfileApprovalServiceRoleGroupVerificationGetWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Validate role approval token and return serice role group details
     * Sample request:                    GET /user-profile/approval/service-role-group/verification?token&#x3D;encryptedtoken
     * @param token  (optional)
     * @return ApiResponse&lt;UserAccessServiceRoleGroupPendingTokenDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccessServiceRoleGroupPendingTokenDetails> userProfileApprovalServiceRoleGroupVerificationGetWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalServiceRoleGroupVerificationGetValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<UserAccessServiceRoleGroupPendingTokenDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate role approval token and return serice role group details (asynchronously)
     * Sample request:                    GET /user-profile/approval/service-role-group/verification?token&#x3D;encryptedtoken
     * @param token  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalServiceRoleGroupVerificationGetAsync(String token, final ApiCallback<UserAccessServiceRoleGroupPendingTokenDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalServiceRoleGroupVerificationGetValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccessServiceRoleGroupPendingTokenDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalServiceRoleGroupsGet
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalServiceRoleGroupsGetCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/service-role-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalServiceRoleGroupsGetValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalServiceRoleGroupsGetCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve user all service role groups which are in pending for approval
     * Sample request:                    GET /user-profile/approval/service-role-groups?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return UserServiceRoleGroupPendingDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserServiceRoleGroupPendingDetails userProfileApprovalServiceRoleGroupsGet(String userId) throws ApiException {
        ApiResponse<UserServiceRoleGroupPendingDetails> resp = userProfileApprovalServiceRoleGroupsGetWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Retrieve user all service role groups which are in pending for approval
     * Sample request:                    GET /user-profile/approval/service-role-groups?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;UserServiceRoleGroupPendingDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserServiceRoleGroupPendingDetails> userProfileApprovalServiceRoleGroupsGetWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalServiceRoleGroupsGetValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserServiceRoleGroupPendingDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve user all service role groups which are in pending for approval (asynchronously)
     * Sample request:                    GET /user-profile/approval/service-role-groups?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalServiceRoleGroupsGetAsync(String userId, final ApiCallback<UserServiceRoleGroupPendingDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalServiceRoleGroupsGetValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserServiceRoleGroupPendingDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalUserRolesGet
     * @param status  (optional)
     * @param userIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalUserRolesGetCall(UserPendingRoleStaus status, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/user-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (userIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-ids", userIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalUserRolesGetValidateBeforeCall(UserPendingRoleStaus status, String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalUserRolesGetCall(status, userIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * 
     * @param status  (optional)
     * @param userIds  (optional)
     * @return UserAccessRolePendingRequestDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccessRolePendingRequestDetails userProfileApprovalUserRolesGet(UserPendingRoleStaus status, String userIds) throws ApiException {
        ApiResponse<UserAccessRolePendingRequestDetails> resp = userProfileApprovalUserRolesGetWithHttpInfo(status, userIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param status  (optional)
     * @param userIds  (optional)
     * @return ApiResponse&lt;UserAccessRolePendingRequestDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccessRolePendingRequestDetails> userProfileApprovalUserRolesGetWithHttpInfo(UserPendingRoleStaus status, String userIds) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalUserRolesGetValidateBeforeCall(status, userIds, null, null);
        Type localVarReturnType = new TypeToken<UserAccessRolePendingRequestDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param status  (optional)
     * @param userIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalUserRolesGetAsync(UserPendingRoleStaus status, String userIds, final ApiCallback<UserAccessRolePendingRequestDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalUserRolesGetValidateBeforeCall(status, userIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccessRolePendingRequestDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalUserRolesPut
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalUserRolesPutCall(UserAccessRolePendingRequestDetails body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/user-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalUserRolesPutValidateBeforeCall(UserAccessRolePendingRequestDetails body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalUserRolesPutCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update role approval details
     * Sample request:        PUT /user-profile/approval/user-roles      {       \&quot;userAccessRolePendingDetails\&quot;: [        {         \&quot;id\&quot;: 1,         \&quot;userId\&quot;: 1,         \&quot;organisationEligibleRoleId\&quot;: 1,         \&quot;status\&quot;: 1,         \&quot;organisationUserGroupId\&quot;: 1,         \&quot;isDeleted\&quot;: true,         \&quot;sendEmailNotification\&quot;: true        }       ]      }
     * @param body  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean userProfileApprovalUserRolesPut(UserAccessRolePendingRequestDetails body) throws ApiException {
        ApiResponse<Boolean> resp = userProfileApprovalUserRolesPutWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update role approval details
     * Sample request:        PUT /user-profile/approval/user-roles      {       \&quot;userAccessRolePendingDetails\&quot;: [        {         \&quot;id\&quot;: 1,         \&quot;userId\&quot;: 1,         \&quot;organisationEligibleRoleId\&quot;: 1,         \&quot;status\&quot;: 1,         \&quot;organisationUserGroupId\&quot;: 1,         \&quot;isDeleted\&quot;: true,         \&quot;sendEmailNotification\&quot;: true        }       ]      }
     * @param body  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> userProfileApprovalUserRolesPutWithHttpInfo(UserAccessRolePendingRequestDetails body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalUserRolesPutValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update role approval details (asynchronously)
     * Sample request:        PUT /user-profile/approval/user-roles      {       \&quot;userAccessRolePendingDetails\&quot;: [        {         \&quot;id\&quot;: 1,         \&quot;userId\&quot;: 1,         \&quot;organisationEligibleRoleId\&quot;: 1,         \&quot;status\&quot;: 1,         \&quot;organisationUserGroupId\&quot;: 1,         \&quot;isDeleted\&quot;: true,         \&quot;sendEmailNotification\&quot;: true        }       ]      }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalUserRolesPutAsync(UserAccessRolePendingRequestDetails body, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalUserRolesPutValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileApprovalVerificationGet
     * @param token  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalVerificationGetCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/approval/verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("token", token));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileApprovalVerificationGetValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileApprovalVerificationGetCall(token, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Validate role approval token and return details
     * Sample request:                    GET /user-profile/approval/verification?token&#x3D;encryptedtoken
     * @param token  (optional)
     * @return UserAccessRolePendingTokenDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserAccessRolePendingTokenDetails userProfileApprovalVerificationGet(String token) throws ApiException {
        ApiResponse<UserAccessRolePendingTokenDetails> resp = userProfileApprovalVerificationGetWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Validate role approval token and return details
     * Sample request:                    GET /user-profile/approval/verification?token&#x3D;encryptedtoken
     * @param token  (optional)
     * @return ApiResponse&lt;UserAccessRolePendingTokenDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserAccessRolePendingTokenDetails> userProfileApprovalVerificationGetWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = userProfileApprovalVerificationGetValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<UserAccessRolePendingTokenDetails>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Validate role approval token and return details (asynchronously)
     * Sample request:                    GET /user-profile/approval/verification?token&#x3D;encryptedtoken
     * @param token  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileApprovalVerificationGetAsync(String token, final ApiCallback<UserAccessRolePendingTokenDetails> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileApprovalVerificationGetValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserAccessRolePendingTokenDetails>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
