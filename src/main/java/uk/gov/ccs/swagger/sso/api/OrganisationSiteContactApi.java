/*
 * CcsSso.WrapperApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.ContactAssignedStatus;
import uk.gov.ccs.swagger.sso.model.ContactAssignmentInfo;
import uk.gov.ccs.swagger.sso.model.ContactRequestInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationSiteContactInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationSiteContactInfoList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationSiteContactApi {
    private ApiClient apiClient;

    public OrganisationSiteContactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationSiteContactApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdAssignedContactsDelete
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactPointIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteCall(String organisationId, Integer siteId, List<Integer> contactPointIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/assigned-contacts"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contactPointIds != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "contact-point-ids", contactPointIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteValidateBeforeCall(String organisationId, Integer siteId, List<Integer> contactPointIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdAssignedContactsDelete(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdAssignedContactsDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteCall(organisationId, siteId, contactPointIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to unassign contacts from an organisation site.  Should provide the assigned contacts contactpoint ids as a query parameter list
     * Sample request:                    DELETE /organisation-profile1/sites/1/assigned-contacts?contactPointIds&#x3D;2
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactPointIds  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileorganisationIdSitesSiteIdAssignedContactsDelete(String organisationId, Integer siteId, List<Integer> contactPointIds) throws ApiException {
        organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteWithHttpInfo(organisationId, siteId, contactPointIds);
    }

    /**
     * Allows a user to unassign contacts from an organisation site.  Should provide the assigned contacts contactpoint ids as a query parameter list
     * Sample request:                    DELETE /organisation-profile1/sites/1/assigned-contacts?contactPointIds&#x3D;2
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactPointIds  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteWithHttpInfo(String organisationId, Integer siteId, List<Integer> contactPointIds) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteValidateBeforeCall(organisationId, siteId, contactPointIds, null, null);
        return apiClient.execute(call);
    }

    /**
     * Allows a user to unassign contacts from an organisation site.  Should provide the assigned contacts contactpoint ids as a query parameter list (asynchronously)
     * Sample request:                    DELETE /organisation-profile1/sites/1/assigned-contacts?contactPointIds&#x3D;2
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactPointIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteAsync(String organisationId, Integer siteId, List<Integer> contactPointIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdAssignedContactsDeleteValidateBeforeCall(organisationId, siteId, contactPointIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdAssignedContactsPost
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdAssignedContactsPostCall(String organisationId, Integer siteId, ContactAssignmentInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/assigned-contacts"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdAssignedContactsPostValidateBeforeCall(String organisationId, Integer siteId, ContactAssignmentInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdAssignedContactsPost(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdAssignedContactsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdAssignedContactsPostCall(organisationId, siteId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to assign user contacts for an organisation site
     * Sample request:                    POST /organisation-profile1/sites/1/assigned-contacts      {         \&quot;AssigningContactType\&quot;: 1, (User:1, Site:2 Only user contacts are valid here)         \&quot;AssigningContactPointIds\&quot;: [1, 2],         \&quot;AssigningContactsUserId\&quot;: \&quot;user@mail.com\&quot;      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> organisationProfileorganisationIdSitesSiteIdAssignedContactsPost(String organisationId, Integer siteId, ContactAssignmentInfo body) throws ApiException {
        ApiResponse<List<Integer>> resp = organisationProfileorganisationIdSitesSiteIdAssignedContactsPostWithHttpInfo(organisationId, siteId, body);
        return resp.getData();
    }

    /**
     * Allows a user to assign user contacts for an organisation site
     * Sample request:                    POST /organisation-profile1/sites/1/assigned-contacts      {         \&quot;AssigningContactType\&quot;: 1, (User:1, Site:2 Only user contacts are valid here)         \&quot;AssigningContactPointIds\&quot;: [1, 2],         \&quot;AssigningContactsUserId\&quot;: \&quot;user@mail.com\&quot;      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> organisationProfileorganisationIdSitesSiteIdAssignedContactsPostWithHttpInfo(String organisationId, Integer siteId, ContactAssignmentInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdAssignedContactsPostValidateBeforeCall(organisationId, siteId, body, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to assign user contacts for an organisation site (asynchronously)
     * Sample request:                    POST /organisation-profile1/sites/1/assigned-contacts      {         \&quot;AssigningContactType\&quot;: 1, (User:1, Site:2 Only user contacts are valid here)         \&quot;AssigningContactPointIds\&quot;: [1, 2],         \&quot;AssigningContactsUserId\&quot;: \&quot;user@mail.com\&quot;      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdAssignedContactsPostAsync(String organisationId, Integer siteId, ContactAssignmentInfo body, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdAssignedContactsPostValidateBeforeCall(organisationId, siteId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdContactsContactIdDelete
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteCall(String organisationId, Integer siteId, Integer contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/contacts/{contactId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteValidateBeforeCall(String organisationId, Integer siteId, Integer contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdDelete(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdDelete(Async)");
        }
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteCall(organisationId, siteId, contactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a contact from an organisation site
     * Sample request:                    DELETE /organisation-profile1/sites/1/contacts/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileorganisationIdSitesSiteIdContactsContactIdDelete(String organisationId, Integer siteId, Integer contactId) throws ApiException {
        organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteWithHttpInfo(organisationId, siteId, contactId);
    }

    /**
     * Remove a contact from an organisation site
     * Sample request:                    DELETE /organisation-profile1/sites/1/contacts/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteWithHttpInfo(String organisationId, Integer siteId, Integer contactId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteValidateBeforeCall(organisationId, siteId, contactId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a contact from an organisation site (asynchronously)
     * Sample request:                    DELETE /organisation-profile1/sites/1/contacts/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteAsync(String organisationId, Integer siteId, Integer contactId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdDeleteValidateBeforeCall(organisationId, siteId, contactId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdContactsContactIdGet
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdGetCall(String organisationId, Integer siteId, Integer contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/contacts/{contactId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdGetValidateBeforeCall(String organisationId, Integer siteId, Integer contactId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdGet(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdGet(Async)");
        }
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdGetCall(organisationId, siteId, contactId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to retrieve details for a given organisation site contact
     * Sample request:                    GET /organisation-profile1/sites/1/contacts/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @return OrganisationSiteContactInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationSiteContactInfo organisationProfileorganisationIdSitesSiteIdContactsContactIdGet(String organisationId, Integer siteId, Integer contactId) throws ApiException {
        ApiResponse<OrganisationSiteContactInfo> resp = organisationProfileorganisationIdSitesSiteIdContactsContactIdGetWithHttpInfo(organisationId, siteId, contactId);
        return resp.getData();
    }

    /**
     * Allows a user to retrieve details for a given organisation site contact
     * Sample request:                    GET /organisation-profile1/sites/1/contacts/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @return ApiResponse&lt;OrganisationSiteContactInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationSiteContactInfo> organisationProfileorganisationIdSitesSiteIdContactsContactIdGetWithHttpInfo(String organisationId, Integer siteId, Integer contactId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdGetValidateBeforeCall(organisationId, siteId, contactId, null, null);
        Type localVarReturnType = new TypeToken<OrganisationSiteContactInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to retrieve details for a given organisation site contact (asynchronously)
     * Sample request:                    GET /organisation-profile1/sites/1/contacts/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdGetAsync(String organisationId, Integer siteId, Integer contactId, final ApiCallback<OrganisationSiteContactInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdGetValidateBeforeCall(organisationId, siteId, contactId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationSiteContactInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdContactsContactIdPut
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdPutCall(String organisationId, Integer siteId, Integer contactId, ContactRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/contacts/{contactId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()))
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdPutValidateBeforeCall(String organisationId, Integer siteId, Integer contactId, ContactRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdPut(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdPut(Async)");
        }
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling organisationProfileorganisationIdSitesSiteIdContactsContactIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdPutCall(organisationId, siteId, contactId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to edit organisation site contact
     * Sample request:                    PUT /organisation-profile1/sites/1/contacts/1      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileorganisationIdSitesSiteIdContactsContactIdPut(String organisationId, Integer siteId, Integer contactId, ContactRequestInfo body) throws ApiException {
        organisationProfileorganisationIdSitesSiteIdContactsContactIdPutWithHttpInfo(organisationId, siteId, contactId, body);
    }

    /**
     * Allows a user to edit organisation site contact
     * Sample request:                    PUT /organisation-profile1/sites/1/contacts/1      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileorganisationIdSitesSiteIdContactsContactIdPutWithHttpInfo(String organisationId, Integer siteId, Integer contactId, ContactRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdPutValidateBeforeCall(organisationId, siteId, contactId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Allows a user to edit organisation site contact (asynchronously)
     * Sample request:                    PUT /organisation-profile1/sites/1/contacts/1      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsContactIdPutAsync(String organisationId, Integer siteId, Integer contactId, ContactRequestInfo body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsContactIdPutValidateBeforeCall(organisationId, siteId, contactId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdContactsGet
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactType  (optional)
     * @param contactAssignedStatus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsGetCall(String organisationId, Integer siteId, String contactType, ContactAssignedStatus contactAssignedStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/contacts"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (contactType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact-type", contactType));
        if (contactAssignedStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact-assigned-status", contactAssignedStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsGetValidateBeforeCall(String organisationId, Integer siteId, String contactType, ContactAssignedStatus contactAssignedStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdContactsGet(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdContactsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsGetCall(organisationId, siteId, contactType, contactAssignedStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to get list of contacts for organisation site
     * Sample request:                    GET organisation-profile1/sites/1/contacts
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactType  (optional)
     * @param contactAssignedStatus  (optional)
     * @return OrganisationSiteContactInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationSiteContactInfoList organisationProfileorganisationIdSitesSiteIdContactsGet(String organisationId, Integer siteId, String contactType, ContactAssignedStatus contactAssignedStatus) throws ApiException {
        ApiResponse<OrganisationSiteContactInfoList> resp = organisationProfileorganisationIdSitesSiteIdContactsGetWithHttpInfo(organisationId, siteId, contactType, contactAssignedStatus);
        return resp.getData();
    }

    /**
     * Allows a user to get list of contacts for organisation site
     * Sample request:                    GET organisation-profile1/sites/1/contacts
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactType  (optional)
     * @param contactAssignedStatus  (optional)
     * @return ApiResponse&lt;OrganisationSiteContactInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationSiteContactInfoList> organisationProfileorganisationIdSitesSiteIdContactsGetWithHttpInfo(String organisationId, Integer siteId, String contactType, ContactAssignedStatus contactAssignedStatus) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsGetValidateBeforeCall(organisationId, siteId, contactType, contactAssignedStatus, null, null);
        Type localVarReturnType = new TypeToken<OrganisationSiteContactInfoList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to get list of contacts for organisation site (asynchronously)
     * Sample request:                    GET organisation-profile1/sites/1/contacts
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param contactType  (optional)
     * @param contactAssignedStatus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsGetAsync(String organisationId, Integer siteId, String contactType, ContactAssignedStatus contactAssignedStatus, final ApiCallback<OrganisationSiteContactInfoList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsGetValidateBeforeCall(organisationId, siteId, contactType, contactAssignedStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationSiteContactInfoList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdSitesSiteIdContactsPost
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsPostCall(String organisationId, Integer siteId, ContactRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/sites/{siteId}/contacts"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsPostValidateBeforeCall(String organisationId, Integer siteId, ContactRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdSitesSiteIdContactsPost(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling organisationProfileorganisationIdSitesSiteIdContactsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsPostCall(organisationId, siteId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create organisation site contact
     * Sample request:                    POST /organisation-profile1/sites/1/contacts      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer organisationProfileorganisationIdSitesSiteIdContactsPost(String organisationId, Integer siteId, ContactRequestInfo body) throws ApiException {
        ApiResponse<Integer> resp = organisationProfileorganisationIdSitesSiteIdContactsPostWithHttpInfo(organisationId, siteId, body);
        return resp.getData();
    }

    /**
     * Allows a user to create organisation site contact
     * Sample request:                    POST /organisation-profile1/sites/1/contacts      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> organisationProfileorganisationIdSitesSiteIdContactsPostWithHttpInfo(String organisationId, Integer siteId, ContactRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsPostValidateBeforeCall(organisationId, siteId, body, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create organisation site contact (asynchronously)
     * Sample request:                    POST /organisation-profile1/sites/1/contacts      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdSitesSiteIdContactsPostAsync(String organisationId, Integer siteId, ContactRequestInfo body, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdSitesSiteIdContactsPostValidateBeforeCall(organisationId, siteId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
