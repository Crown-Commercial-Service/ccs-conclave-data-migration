/*
 * CcsSso.ContactApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.OrgRegistryContactDetail;
import uk.gov.ccs.swagger.sso.model.OrgRegistryContactDetailInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationRegistryContactApi {
    private ApiClient apiClient;

    public OrganisationRegistryContactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationRegistryContactApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contactServiceOrganisationsOrganisationIdRegistryContactDelete
     * @param organisationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactDeleteCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/registry-contact"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactDeleteValidateBeforeCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdRegistryContactDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactDeleteCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete contact details
     * Sample request:                    DELETE contact-service/organisations/1/registry-contact
     * @param organisationId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceOrganisationsOrganisationIdRegistryContactDelete(String organisationId) throws ApiException {
        contactServiceOrganisationsOrganisationIdRegistryContactDeleteWithHttpInfo(organisationId);
    }

    /**
     * Delete contact details
     * Sample request:                    DELETE contact-service/organisations/1/registry-contact
     * @param organisationId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceOrganisationsOrganisationIdRegistryContactDeleteWithHttpInfo(String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactDeleteValidateBeforeCall(organisationId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete contact details (asynchronously)
     * Sample request:                    DELETE contact-service/organisations/1/registry-contact
     * @param organisationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactDeleteAsync(String organisationId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactDeleteValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdRegistryContactGet
     * @param organisationId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactGetCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/registry-contact"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactGetValidateBeforeCall(String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdRegistryContactGet(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactGetCall(organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get contact details
     * Sample request:                    GET /contact-service/organisations/1/registry-contact
     * @param organisationId  (required)
     * @return OrgRegistryContactDetailInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrgRegistryContactDetailInfo contactServiceOrganisationsOrganisationIdRegistryContactGet(String organisationId) throws ApiException {
        ApiResponse<OrgRegistryContactDetailInfo> resp = contactServiceOrganisationsOrganisationIdRegistryContactGetWithHttpInfo(organisationId);
        return resp.getData();
    }

    /**
     * Get contact details
     * Sample request:                    GET /contact-service/organisations/1/registry-contact
     * @param organisationId  (required)
     * @return ApiResponse&lt;OrgRegistryContactDetailInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrgRegistryContactDetailInfo> contactServiceOrganisationsOrganisationIdRegistryContactGetWithHttpInfo(String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactGetValidateBeforeCall(organisationId, null, null);
        Type localVarReturnType = new TypeToken<OrgRegistryContactDetailInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contact details (asynchronously)
     * Sample request:                    GET /contact-service/organisations/1/registry-contact
     * @param organisationId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactGetAsync(String organisationId, final ApiCallback<OrgRegistryContactDetailInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactGetValidateBeforeCall(organisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrgRegistryContactDetailInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdRegistryContactPatch
     * @param organisationId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactPatchCall(String organisationId, OrgRegistryContactDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/registry-contact"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactPatchValidateBeforeCall(String organisationId, OrgRegistryContactDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdRegistryContactPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactPatchCall(organisationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update contact details
     * Sample request:                    PATCH /contact-service/organisations/1/registry-contact      {        \&quot;address\&quot;: {            \&quot;streetAddress\&quot;: \&quot;30 Warwick Street, Poland\&quot;,            \&quot;locality\&quot;: \&quot;Marki\&quot;,            \&quot;region\&quot;: \&quot;Warsaw\&quot;,            \&quot;postalCode\&quot;: \&quot;W1B 5NH\&quot;,            \&quot;countryName\&quot;: \&quot;POLAND\&quot;,            \&quot;countryCode\&quot;:\&quot;PL\&quot;        },         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,        \&quot;contacts\&quot;: [{               \&quot;contactType\&quot;: \&quot;EMAIL\&quot;,               \&quot;contactValue\&quot;: \&quot;testuser@mail.com\&quot;            },            {               \&quot;contactType\&quot;: \&quot;PHONE\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;FAX\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;WEB_ADDRESS\&quot;,               \&quot;contactValue\&quot;: \&quot;test.com\&quot;            }          ]      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceOrganisationsOrganisationIdRegistryContactPatch(String organisationId, OrgRegistryContactDetail body) throws ApiException {
        contactServiceOrganisationsOrganisationIdRegistryContactPatchWithHttpInfo(organisationId, body);
    }

    /**
     * Update contact details
     * Sample request:                    PATCH /contact-service/organisations/1/registry-contact      {        \&quot;address\&quot;: {            \&quot;streetAddress\&quot;: \&quot;30 Warwick Street, Poland\&quot;,            \&quot;locality\&quot;: \&quot;Marki\&quot;,            \&quot;region\&quot;: \&quot;Warsaw\&quot;,            \&quot;postalCode\&quot;: \&quot;W1B 5NH\&quot;,            \&quot;countryName\&quot;: \&quot;POLAND\&quot;,            \&quot;countryCode\&quot;:\&quot;PL\&quot;        },         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,        \&quot;contacts\&quot;: [{               \&quot;contactType\&quot;: \&quot;EMAIL\&quot;,               \&quot;contactValue\&quot;: \&quot;testuser@mail.com\&quot;            },            {               \&quot;contactType\&quot;: \&quot;PHONE\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;FAX\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;WEB_ADDRESS\&quot;,               \&quot;contactValue\&quot;: \&quot;test.com\&quot;            }          ]      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceOrganisationsOrganisationIdRegistryContactPatchWithHttpInfo(String organisationId, OrgRegistryContactDetail body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactPatchValidateBeforeCall(organisationId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update contact details (asynchronously)
     * Sample request:                    PATCH /contact-service/organisations/1/registry-contact      {        \&quot;address\&quot;: {            \&quot;streetAddress\&quot;: \&quot;30 Warwick Street, Poland\&quot;,            \&quot;locality\&quot;: \&quot;Marki\&quot;,            \&quot;region\&quot;: \&quot;Warsaw\&quot;,            \&quot;postalCode\&quot;: \&quot;W1B 5NH\&quot;,            \&quot;countryName\&quot;: \&quot;POLAND\&quot;,            \&quot;countryCode\&quot;:\&quot;PL\&quot;        },         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,        \&quot;contacts\&quot;: [{               \&quot;contactType\&quot;: \&quot;EMAIL\&quot;,               \&quot;contactValue\&quot;: \&quot;testuser@mail.com\&quot;            },            {               \&quot;contactType\&quot;: \&quot;PHONE\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;FAX\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;WEB_ADDRESS\&quot;,               \&quot;contactValue\&quot;: \&quot;test.com\&quot;            }          ]      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactPatchAsync(String organisationId, OrgRegistryContactDetail body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactPatchValidateBeforeCall(organisationId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdRegistryContactPost
     * @param organisationId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactPostCall(String organisationId, OrgRegistryContactDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/registry-contact"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactPostValidateBeforeCall(String organisationId, OrgRegistryContactDetail body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdRegistryContactPost(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactPostCall(organisationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create contact details
     * Sample request:                    POST /contact-service/organisations/1/registry-contact      {        \&quot;address\&quot;: {            \&quot;streetAddress\&quot;: \&quot;30 Warwick Street, Poland\&quot;,            \&quot;locality\&quot;: \&quot;Marki\&quot;,            \&quot;region\&quot;: \&quot;Warsaw\&quot;,            \&quot;postalCode\&quot;: \&quot;W1B 5NH\&quot;,            \&quot;countryName\&quot;: \&quot;POLAND\&quot;,            \&quot;countryCode\&quot;:\&quot;PL\&quot;        },        \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,        \&quot;contacts\&quot;: [{               \&quot;contactType\&quot;: \&quot;EMAIL\&quot;,               \&quot;contactValue\&quot;: \&quot;testuser@mail.com\&quot;            },            {               \&quot;contactType\&quot;: \&quot;PHONE\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;FAX\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;WEB_ADDRESS\&quot;,               \&quot;contactValue\&quot;: \&quot;test.com\&quot;            }          ]      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer contactServiceOrganisationsOrganisationIdRegistryContactPost(String organisationId, OrgRegistryContactDetail body) throws ApiException {
        ApiResponse<Integer> resp = contactServiceOrganisationsOrganisationIdRegistryContactPostWithHttpInfo(organisationId, body);
        return resp.getData();
    }

    /**
     * Create contact details
     * Sample request:                    POST /contact-service/organisations/1/registry-contact      {        \&quot;address\&quot;: {            \&quot;streetAddress\&quot;: \&quot;30 Warwick Street, Poland\&quot;,            \&quot;locality\&quot;: \&quot;Marki\&quot;,            \&quot;region\&quot;: \&quot;Warsaw\&quot;,            \&quot;postalCode\&quot;: \&quot;W1B 5NH\&quot;,            \&quot;countryName\&quot;: \&quot;POLAND\&quot;,            \&quot;countryCode\&quot;:\&quot;PL\&quot;        },        \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,        \&quot;contacts\&quot;: [{               \&quot;contactType\&quot;: \&quot;EMAIL\&quot;,               \&quot;contactValue\&quot;: \&quot;testuser@mail.com\&quot;            },            {               \&quot;contactType\&quot;: \&quot;PHONE\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;FAX\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;WEB_ADDRESS\&quot;,               \&quot;contactValue\&quot;: \&quot;test.com\&quot;            }          ]      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> contactServiceOrganisationsOrganisationIdRegistryContactPostWithHttpInfo(String organisationId, OrgRegistryContactDetail body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactPostValidateBeforeCall(organisationId, body, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create contact details (asynchronously)
     * Sample request:                    POST /contact-service/organisations/1/registry-contact      {        \&quot;address\&quot;: {            \&quot;streetAddress\&quot;: \&quot;30 Warwick Street, Poland\&quot;,            \&quot;locality\&quot;: \&quot;Marki\&quot;,            \&quot;region\&quot;: \&quot;Warsaw\&quot;,            \&quot;postalCode\&quot;: \&quot;W1B 5NH\&quot;,            \&quot;countryName\&quot;: \&quot;POLAND\&quot;,            \&quot;countryCode\&quot;:\&quot;PL\&quot;        },        \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,        \&quot;contacts\&quot;: [{               \&quot;contactType\&quot;: \&quot;EMAIL\&quot;,               \&quot;contactValue\&quot;: \&quot;testuser@mail.com\&quot;            },            {               \&quot;contactType\&quot;: \&quot;PHONE\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;FAX\&quot;,               \&quot;contactValue\&quot;: \&quot;+551155256325\&quot;            },            {               \&quot;contactType\&quot;: \&quot;WEB_ADDRESS\&quot;,               \&quot;contactValue\&quot;: \&quot;test.com\&quot;            }          ]      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdRegistryContactPostAsync(String organisationId, OrgRegistryContactDetail body, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdRegistryContactPostValidateBeforeCall(organisationId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
