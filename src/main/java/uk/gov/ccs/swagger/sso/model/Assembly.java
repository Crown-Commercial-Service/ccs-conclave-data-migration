/*
 * CcsSso.OrganisationApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import uk.gov.ccs.swagger.sso.model.CustomAttributeData;
import uk.gov.ccs.swagger.sso.model.MethodInfo;
import uk.gov.ccs.swagger.sso.model.Module;
import uk.gov.ccs.swagger.sso.model.SecurityRuleSet;
import uk.gov.ccs.swagger.sso.model.Type;
import uk.gov.ccs.swagger.sso.model.TypeInfo;
/**
 * Assembly
 */


public class Assembly {
  @SerializedName("definedTypes")
  private List<TypeInfo> definedTypes = null;

  @SerializedName("exportedTypes")
  private List<Type> exportedTypes = null;

  @SerializedName("codeBase")
  private String codeBase = null;

  @SerializedName("entryPoint")
  private MethodInfo entryPoint = null;

  @SerializedName("fullName")
  private String fullName = null;

  @SerializedName("imageRuntimeVersion")
  private String imageRuntimeVersion = null;

  @SerializedName("isDynamic")
  private Boolean isDynamic = null;

  @SerializedName("location")
  private String location = null;

  @SerializedName("reflectionOnly")
  private Boolean reflectionOnly = null;

  @SerializedName("isCollectible")
  private Boolean isCollectible = null;

  @SerializedName("isFullyTrusted")
  private Boolean isFullyTrusted = null;

  @SerializedName("customAttributes")
  private List<CustomAttributeData> customAttributes = null;

  @SerializedName("escapedCodeBase")
  private String escapedCodeBase = null;

  @SerializedName("manifestModule")
  private Module manifestModule = null;

  @SerializedName("modules")
  private List<Module> modules = null;

  @SerializedName("globalAssemblyCache")
  private Boolean globalAssemblyCache = null;

  @SerializedName("hostContext")
  private Long hostContext = null;

  @SerializedName("securityRuleSet")
  private SecurityRuleSet securityRuleSet = null;

   /**
   * Get definedTypes
   * @return definedTypes
  **/
  @Schema(description = "")
  public List<TypeInfo> getDefinedTypes() {
    return definedTypes;
  }

   /**
   * Get exportedTypes
   * @return exportedTypes
  **/
  @Schema(description = "")
  public List<Type> getExportedTypes() {
    return exportedTypes;
  }

   /**
   * Get codeBase
   * @return codeBase
  **/
  @Schema(description = "")
  public String getCodeBase() {
    return codeBase;
  }

  public Assembly entryPoint(MethodInfo entryPoint) {
    this.entryPoint = entryPoint;
    return this;
  }

   /**
   * Get entryPoint
   * @return entryPoint
  **/
  @Schema(description = "")
  public MethodInfo getEntryPoint() {
    return entryPoint;
  }

  public void setEntryPoint(MethodInfo entryPoint) {
    this.entryPoint = entryPoint;
  }

   /**
   * Get fullName
   * @return fullName
  **/
  @Schema(description = "")
  public String getFullName() {
    return fullName;
  }

   /**
   * Get imageRuntimeVersion
   * @return imageRuntimeVersion
  **/
  @Schema(description = "")
  public String getImageRuntimeVersion() {
    return imageRuntimeVersion;
  }

   /**
   * Get isDynamic
   * @return isDynamic
  **/
  @Schema(description = "")
  public Boolean isIsDynamic() {
    return isDynamic;
  }

   /**
   * Get location
   * @return location
  **/
  @Schema(description = "")
  public String getLocation() {
    return location;
  }

   /**
   * Get reflectionOnly
   * @return reflectionOnly
  **/
  @Schema(description = "")
  public Boolean isReflectionOnly() {
    return reflectionOnly;
  }

   /**
   * Get isCollectible
   * @return isCollectible
  **/
  @Schema(description = "")
  public Boolean isIsCollectible() {
    return isCollectible;
  }

   /**
   * Get isFullyTrusted
   * @return isFullyTrusted
  **/
  @Schema(description = "")
  public Boolean isIsFullyTrusted() {
    return isFullyTrusted;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @Schema(description = "")
  public List<CustomAttributeData> getCustomAttributes() {
    return customAttributes;
  }

   /**
   * Get escapedCodeBase
   * @return escapedCodeBase
  **/
  @Schema(description = "")
  public String getEscapedCodeBase() {
    return escapedCodeBase;
  }

  public Assembly manifestModule(Module manifestModule) {
    this.manifestModule = manifestModule;
    return this;
  }

   /**
   * Get manifestModule
   * @return manifestModule
  **/
  @Schema(description = "")
  public Module getManifestModule() {
    return manifestModule;
  }

  public void setManifestModule(Module manifestModule) {
    this.manifestModule = manifestModule;
  }

   /**
   * Get modules
   * @return modules
  **/
  @Schema(description = "")
  public List<Module> getModules() {
    return modules;
  }

   /**
   * Get globalAssemblyCache
   * @return globalAssemblyCache
  **/
  @Schema(description = "")
  public Boolean isGlobalAssemblyCache() {
    return globalAssemblyCache;
  }

   /**
   * Get hostContext
   * @return hostContext
  **/
  @Schema(description = "")
  public Long getHostContext() {
    return hostContext;
  }

  public Assembly securityRuleSet(SecurityRuleSet securityRuleSet) {
    this.securityRuleSet = securityRuleSet;
    return this;
  }

   /**
   * Get securityRuleSet
   * @return securityRuleSet
  **/
  @Schema(description = "")
  public SecurityRuleSet getSecurityRuleSet() {
    return securityRuleSet;
  }

  public void setSecurityRuleSet(SecurityRuleSet securityRuleSet) {
    this.securityRuleSet = securityRuleSet;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assembly assembly = (Assembly) o;
    return Objects.equals(this.definedTypes, assembly.definedTypes) &&
        Objects.equals(this.exportedTypes, assembly.exportedTypes) &&
        Objects.equals(this.codeBase, assembly.codeBase) &&
        Objects.equals(this.entryPoint, assembly.entryPoint) &&
        Objects.equals(this.fullName, assembly.fullName) &&
        Objects.equals(this.imageRuntimeVersion, assembly.imageRuntimeVersion) &&
        Objects.equals(this.isDynamic, assembly.isDynamic) &&
        Objects.equals(this.location, assembly.location) &&
        Objects.equals(this.reflectionOnly, assembly.reflectionOnly) &&
        Objects.equals(this.isCollectible, assembly.isCollectible) &&
        Objects.equals(this.isFullyTrusted, assembly.isFullyTrusted) &&
        Objects.equals(this.customAttributes, assembly.customAttributes) &&
        Objects.equals(this.escapedCodeBase, assembly.escapedCodeBase) &&
        Objects.equals(this.manifestModule, assembly.manifestModule) &&
        Objects.equals(this.modules, assembly.modules) &&
        Objects.equals(this.globalAssemblyCache, assembly.globalAssemblyCache) &&
        Objects.equals(this.hostContext, assembly.hostContext) &&
        Objects.equals(this.securityRuleSet, assembly.securityRuleSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(definedTypes, exportedTypes, codeBase, entryPoint, fullName, imageRuntimeVersion, isDynamic, location, reflectionOnly, isCollectible, isFullyTrusted, customAttributes, escapedCodeBase, manifestModule, modules, globalAssemblyCache, hostContext, securityRuleSet);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assembly {\n");
    
    sb.append("    definedTypes: ").append(toIndentedString(definedTypes)).append("\n");
    sb.append("    exportedTypes: ").append(toIndentedString(exportedTypes)).append("\n");
    sb.append("    codeBase: ").append(toIndentedString(codeBase)).append("\n");
    sb.append("    entryPoint: ").append(toIndentedString(entryPoint)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    imageRuntimeVersion: ").append(toIndentedString(imageRuntimeVersion)).append("\n");
    sb.append("    isDynamic: ").append(toIndentedString(isDynamic)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    reflectionOnly: ").append(toIndentedString(reflectionOnly)).append("\n");
    sb.append("    isCollectible: ").append(toIndentedString(isCollectible)).append("\n");
    sb.append("    isFullyTrusted: ").append(toIndentedString(isFullyTrusted)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    escapedCodeBase: ").append(toIndentedString(escapedCodeBase)).append("\n");
    sb.append("    manifestModule: ").append(toIndentedString(manifestModule)).append("\n");
    sb.append("    modules: ").append(toIndentedString(modules)).append("\n");
    sb.append("    globalAssemblyCache: ").append(toIndentedString(globalAssemblyCache)).append("\n");
    sb.append("    hostContext: ").append(toIndentedString(hostContext)).append("\n");
    sb.append("    securityRuleSet: ").append(toIndentedString(securityRuleSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
