/*
 * CcsSso.OrganisationApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import uk.gov.ccs.swagger.sso.model.CustomAttributeData;
import uk.gov.ccs.swagger.sso.model.FieldAttributes;
import uk.gov.ccs.swagger.sso.model.MemberTypes;
import uk.gov.ccs.swagger.sso.model.Module;
import uk.gov.ccs.swagger.sso.model.RuntimeFieldHandle;
import uk.gov.ccs.swagger.sso.model.Type;
/**
 * FieldInfo
 */


public class FieldInfo {
  @SerializedName("name")
  private String name = null;

  @SerializedName("declaringType")
  private Type declaringType = null;

  @SerializedName("reflectedType")
  private Type reflectedType = null;

  @SerializedName("module")
  private Module module = null;

  @SerializedName("customAttributes")
  private List<CustomAttributeData> customAttributes = null;

  @SerializedName("isCollectible")
  private Boolean isCollectible = null;

  @SerializedName("metadataToken")
  private Integer metadataToken = null;

  @SerializedName("memberType")
  private MemberTypes memberType = null;

  @SerializedName("attributes")
  private FieldAttributes attributes = null;

  @SerializedName("fieldType")
  private Type fieldType = null;

  @SerializedName("isInitOnly")
  private Boolean isInitOnly = null;

  @SerializedName("isLiteral")
  private Boolean isLiteral = null;

  @SerializedName("isNotSerialized")
  private Boolean isNotSerialized = null;

  @SerializedName("isPinvokeImpl")
  private Boolean isPinvokeImpl = null;

  @SerializedName("isSpecialName")
  private Boolean isSpecialName = null;

  @SerializedName("isStatic")
  private Boolean isStatic = null;

  @SerializedName("isAssembly")
  private Boolean isAssembly = null;

  @SerializedName("isFamily")
  private Boolean isFamily = null;

  @SerializedName("isFamilyAndAssembly")
  private Boolean isFamilyAndAssembly = null;

  @SerializedName("isFamilyOrAssembly")
  private Boolean isFamilyOrAssembly = null;

  @SerializedName("isPrivate")
  private Boolean isPrivate = null;

  @SerializedName("isPublic")
  private Boolean isPublic = null;

  @SerializedName("isSecurityCritical")
  private Boolean isSecurityCritical = null;

  @SerializedName("isSecuritySafeCritical")
  private Boolean isSecuritySafeCritical = null;

  @SerializedName("isSecurityTransparent")
  private Boolean isSecurityTransparent = null;

  @SerializedName("fieldHandle")
  private RuntimeFieldHandle fieldHandle = null;

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public FieldInfo declaringType(Type declaringType) {
    this.declaringType = declaringType;
    return this;
  }

   /**
   * Get declaringType
   * @return declaringType
  **/
  @Schema(description = "")
  public Type getDeclaringType() {
    return declaringType;
  }

  public void setDeclaringType(Type declaringType) {
    this.declaringType = declaringType;
  }

  public FieldInfo reflectedType(Type reflectedType) {
    this.reflectedType = reflectedType;
    return this;
  }

   /**
   * Get reflectedType
   * @return reflectedType
  **/
  @Schema(description = "")
  public Type getReflectedType() {
    return reflectedType;
  }

  public void setReflectedType(Type reflectedType) {
    this.reflectedType = reflectedType;
  }

  public FieldInfo module(Module module) {
    this.module = module;
    return this;
  }

   /**
   * Get module
   * @return module
  **/
  @Schema(description = "")
  public Module getModule() {
    return module;
  }

  public void setModule(Module module) {
    this.module = module;
  }

   /**
   * Get customAttributes
   * @return customAttributes
  **/
  @Schema(description = "")
  public List<CustomAttributeData> getCustomAttributes() {
    return customAttributes;
  }

   /**
   * Get isCollectible
   * @return isCollectible
  **/
  @Schema(description = "")
  public Boolean isIsCollectible() {
    return isCollectible;
  }

   /**
   * Get metadataToken
   * @return metadataToken
  **/
  @Schema(description = "")
  public Integer getMetadataToken() {
    return metadataToken;
  }

  public FieldInfo memberType(MemberTypes memberType) {
    this.memberType = memberType;
    return this;
  }

   /**
   * Get memberType
   * @return memberType
  **/
  @Schema(description = "")
  public MemberTypes getMemberType() {
    return memberType;
  }

  public void setMemberType(MemberTypes memberType) {
    this.memberType = memberType;
  }

  public FieldInfo attributes(FieldAttributes attributes) {
    this.attributes = attributes;
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @Schema(description = "")
  public FieldAttributes getAttributes() {
    return attributes;
  }

  public void setAttributes(FieldAttributes attributes) {
    this.attributes = attributes;
  }

  public FieldInfo fieldType(Type fieldType) {
    this.fieldType = fieldType;
    return this;
  }

   /**
   * Get fieldType
   * @return fieldType
  **/
  @Schema(description = "")
  public Type getFieldType() {
    return fieldType;
  }

  public void setFieldType(Type fieldType) {
    this.fieldType = fieldType;
  }

   /**
   * Get isInitOnly
   * @return isInitOnly
  **/
  @Schema(description = "")
  public Boolean isIsInitOnly() {
    return isInitOnly;
  }

   /**
   * Get isLiteral
   * @return isLiteral
  **/
  @Schema(description = "")
  public Boolean isIsLiteral() {
    return isLiteral;
  }

   /**
   * Get isNotSerialized
   * @return isNotSerialized
  **/
  @Schema(description = "")
  public Boolean isIsNotSerialized() {
    return isNotSerialized;
  }

   /**
   * Get isPinvokeImpl
   * @return isPinvokeImpl
  **/
  @Schema(description = "")
  public Boolean isIsPinvokeImpl() {
    return isPinvokeImpl;
  }

   /**
   * Get isSpecialName
   * @return isSpecialName
  **/
  @Schema(description = "")
  public Boolean isIsSpecialName() {
    return isSpecialName;
  }

   /**
   * Get isStatic
   * @return isStatic
  **/
  @Schema(description = "")
  public Boolean isIsStatic() {
    return isStatic;
  }

   /**
   * Get isAssembly
   * @return isAssembly
  **/
  @Schema(description = "")
  public Boolean isIsAssembly() {
    return isAssembly;
  }

   /**
   * Get isFamily
   * @return isFamily
  **/
  @Schema(description = "")
  public Boolean isIsFamily() {
    return isFamily;
  }

   /**
   * Get isFamilyAndAssembly
   * @return isFamilyAndAssembly
  **/
  @Schema(description = "")
  public Boolean isIsFamilyAndAssembly() {
    return isFamilyAndAssembly;
  }

   /**
   * Get isFamilyOrAssembly
   * @return isFamilyOrAssembly
  **/
  @Schema(description = "")
  public Boolean isIsFamilyOrAssembly() {
    return isFamilyOrAssembly;
  }

   /**
   * Get isPrivate
   * @return isPrivate
  **/
  @Schema(description = "")
  public Boolean isIsPrivate() {
    return isPrivate;
  }

   /**
   * Get isPublic
   * @return isPublic
  **/
  @Schema(description = "")
  public Boolean isIsPublic() {
    return isPublic;
  }

   /**
   * Get isSecurityCritical
   * @return isSecurityCritical
  **/
  @Schema(description = "")
  public Boolean isIsSecurityCritical() {
    return isSecurityCritical;
  }

   /**
   * Get isSecuritySafeCritical
   * @return isSecuritySafeCritical
  **/
  @Schema(description = "")
  public Boolean isIsSecuritySafeCritical() {
    return isSecuritySafeCritical;
  }

   /**
   * Get isSecurityTransparent
   * @return isSecurityTransparent
  **/
  @Schema(description = "")
  public Boolean isIsSecurityTransparent() {
    return isSecurityTransparent;
  }

  public FieldInfo fieldHandle(RuntimeFieldHandle fieldHandle) {
    this.fieldHandle = fieldHandle;
    return this;
  }

   /**
   * Get fieldHandle
   * @return fieldHandle
  **/
  @Schema(description = "")
  public RuntimeFieldHandle getFieldHandle() {
    return fieldHandle;
  }

  public void setFieldHandle(RuntimeFieldHandle fieldHandle) {
    this.fieldHandle = fieldHandle;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldInfo fieldInfo = (FieldInfo) o;
    return Objects.equals(this.name, fieldInfo.name) &&
        Objects.equals(this.declaringType, fieldInfo.declaringType) &&
        Objects.equals(this.reflectedType, fieldInfo.reflectedType) &&
        Objects.equals(this.module, fieldInfo.module) &&
        Objects.equals(this.customAttributes, fieldInfo.customAttributes) &&
        Objects.equals(this.isCollectible, fieldInfo.isCollectible) &&
        Objects.equals(this.metadataToken, fieldInfo.metadataToken) &&
        Objects.equals(this.memberType, fieldInfo.memberType) &&
        Objects.equals(this.attributes, fieldInfo.attributes) &&
        Objects.equals(this.fieldType, fieldInfo.fieldType) &&
        Objects.equals(this.isInitOnly, fieldInfo.isInitOnly) &&
        Objects.equals(this.isLiteral, fieldInfo.isLiteral) &&
        Objects.equals(this.isNotSerialized, fieldInfo.isNotSerialized) &&
        Objects.equals(this.isPinvokeImpl, fieldInfo.isPinvokeImpl) &&
        Objects.equals(this.isSpecialName, fieldInfo.isSpecialName) &&
        Objects.equals(this.isStatic, fieldInfo.isStatic) &&
        Objects.equals(this.isAssembly, fieldInfo.isAssembly) &&
        Objects.equals(this.isFamily, fieldInfo.isFamily) &&
        Objects.equals(this.isFamilyAndAssembly, fieldInfo.isFamilyAndAssembly) &&
        Objects.equals(this.isFamilyOrAssembly, fieldInfo.isFamilyOrAssembly) &&
        Objects.equals(this.isPrivate, fieldInfo.isPrivate) &&
        Objects.equals(this.isPublic, fieldInfo.isPublic) &&
        Objects.equals(this.isSecurityCritical, fieldInfo.isSecurityCritical) &&
        Objects.equals(this.isSecuritySafeCritical, fieldInfo.isSecuritySafeCritical) &&
        Objects.equals(this.isSecurityTransparent, fieldInfo.isSecurityTransparent) &&
        Objects.equals(this.fieldHandle, fieldInfo.fieldHandle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, declaringType, reflectedType, module, customAttributes, isCollectible, metadataToken, memberType, attributes, fieldType, isInitOnly, isLiteral, isNotSerialized, isPinvokeImpl, isSpecialName, isStatic, isAssembly, isFamily, isFamilyAndAssembly, isFamilyOrAssembly, isPrivate, isPublic, isSecurityCritical, isSecuritySafeCritical, isSecurityTransparent, fieldHandle);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldInfo {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    declaringType: ").append(toIndentedString(declaringType)).append("\n");
    sb.append("    reflectedType: ").append(toIndentedString(reflectedType)).append("\n");
    sb.append("    module: ").append(toIndentedString(module)).append("\n");
    sb.append("    customAttributes: ").append(toIndentedString(customAttributes)).append("\n");
    sb.append("    isCollectible: ").append(toIndentedString(isCollectible)).append("\n");
    sb.append("    metadataToken: ").append(toIndentedString(metadataToken)).append("\n");
    sb.append("    memberType: ").append(toIndentedString(memberType)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    fieldType: ").append(toIndentedString(fieldType)).append("\n");
    sb.append("    isInitOnly: ").append(toIndentedString(isInitOnly)).append("\n");
    sb.append("    isLiteral: ").append(toIndentedString(isLiteral)).append("\n");
    sb.append("    isNotSerialized: ").append(toIndentedString(isNotSerialized)).append("\n");
    sb.append("    isPinvokeImpl: ").append(toIndentedString(isPinvokeImpl)).append("\n");
    sb.append("    isSpecialName: ").append(toIndentedString(isSpecialName)).append("\n");
    sb.append("    isStatic: ").append(toIndentedString(isStatic)).append("\n");
    sb.append("    isAssembly: ").append(toIndentedString(isAssembly)).append("\n");
    sb.append("    isFamily: ").append(toIndentedString(isFamily)).append("\n");
    sb.append("    isFamilyAndAssembly: ").append(toIndentedString(isFamilyAndAssembly)).append("\n");
    sb.append("    isFamilyOrAssembly: ").append(toIndentedString(isFamilyOrAssembly)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isPublic: ").append(toIndentedString(isPublic)).append("\n");
    sb.append("    isSecurityCritical: ").append(toIndentedString(isSecurityCritical)).append("\n");
    sb.append("    isSecuritySafeCritical: ").append(toIndentedString(isSecuritySafeCritical)).append("\n");
    sb.append("    isSecurityTransparent: ").append(toIndentedString(isSecurityTransparent)).append("\n");
    sb.append("    fieldHandle: ").append(toIndentedString(fieldHandle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
