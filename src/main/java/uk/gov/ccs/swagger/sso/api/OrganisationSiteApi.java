/*
 * CcsSso.ContactApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.OrganisationSiteInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationSiteInfoList;
import uk.gov.ccs.swagger.sso.model.OrganisationSiteResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationSiteApi {
    private ApiClient apiClient;

    public OrganisationSiteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationSiteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contactServiceOrganisationsOrganisationIdSitesGet
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesGetCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/sites"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search-string", searchString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesGetValidateBeforeCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdSitesGet(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesGetCall(organisationId, searchString, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to get all the sites in an organisation
     * Sample request:                    GET /contact-service/organisations/1/site?search-string&#x3D;sitename
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return OrganisationSiteInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationSiteInfoList contactServiceOrganisationsOrganisationIdSitesGet(String organisationId, String searchString) throws ApiException {
        ApiResponse<OrganisationSiteInfoList> resp = contactServiceOrganisationsOrganisationIdSitesGetWithHttpInfo(organisationId, searchString);
        return resp.getData();
    }

    /**
     * Allows a user to get all the sites in an organisation
     * Sample request:                    GET /contact-service/organisations/1/site?search-string&#x3D;sitename
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return ApiResponse&lt;OrganisationSiteInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationSiteInfoList> contactServiceOrganisationsOrganisationIdSitesGetWithHttpInfo(String organisationId, String searchString) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesGetValidateBeforeCall(organisationId, searchString, null, null);
        Type localVarReturnType = new TypeToken<OrganisationSiteInfoList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to get all the sites in an organisation (asynchronously)
     * Sample request:                    GET /contact-service/organisations/1/site?search-string&#x3D;sitename
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesGetAsync(String organisationId, String searchString, final ApiCallback<OrganisationSiteInfoList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesGetValidateBeforeCall(organisationId, searchString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationSiteInfoList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdSitesPost
     * @param organisationId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesPostCall(String organisationId, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/sites"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesPostValidateBeforeCall(String organisationId, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdSitesPost(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesPostCall(organisationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create organisation site
     * Sample request:                    POST /contact-service/organisations/1/site      {        \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,        \&quot;address\&quot;: {          \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,          \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,          \&quot;region\&quot;: \&quot;CA.\&quot;,          \&quot;postalCode\&quot;: \&quot;94043\&quot;,          \&quot;countryCode\&quot;: \&quot;US\&quot;        }      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer contactServiceOrganisationsOrganisationIdSitesPost(String organisationId, OrganisationSiteInfo body) throws ApiException {
        ApiResponse<Integer> resp = contactServiceOrganisationsOrganisationIdSitesPostWithHttpInfo(organisationId, body);
        return resp.getData();
    }

    /**
     * Allows a user to create organisation site
     * Sample request:                    POST /contact-service/organisations/1/site      {        \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,        \&quot;address\&quot;: {          \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,          \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,          \&quot;region\&quot;: \&quot;CA.\&quot;,          \&quot;postalCode\&quot;: \&quot;94043\&quot;,          \&quot;countryCode\&quot;: \&quot;US\&quot;        }      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> contactServiceOrganisationsOrganisationIdSitesPostWithHttpInfo(String organisationId, OrganisationSiteInfo body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesPostValidateBeforeCall(organisationId, body, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create organisation site (asynchronously)
     * Sample request:                    POST /contact-service/organisations/1/site      {        \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,        \&quot;address\&quot;: {          \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,          \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,          \&quot;region\&quot;: \&quot;CA.\&quot;,          \&quot;postalCode\&quot;: \&quot;94043\&quot;,          \&quot;countryCode\&quot;: \&quot;US\&quot;        }      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesPostAsync(String organisationId, OrganisationSiteInfo body, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesPostValidateBeforeCall(organisationId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdSitesSiteIdDelete
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteCall(String organisationId, Integer siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/sites/{siteId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteValidateBeforeCall(String organisationId, Integer siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdSitesSiteIdDelete(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceOrganisationsOrganisationIdSitesSiteIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteCall(organisationId, siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to delete organisation site
     * Sample request:                    DELETE /contact-service/organisations/1/site/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceOrganisationsOrganisationIdSitesSiteIdDelete(String organisationId, Integer siteId) throws ApiException {
        contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteWithHttpInfo(organisationId, siteId);
    }

    /**
     * Allows a user to delete organisation site
     * Sample request:                    DELETE /contact-service/organisations/1/site/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteWithHttpInfo(String organisationId, Integer siteId) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteValidateBeforeCall(organisationId, siteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Allows a user to delete organisation site (asynchronously)
     * Sample request:                    DELETE /contact-service/organisations/1/site/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteAsync(String organisationId, Integer siteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdDeleteValidateBeforeCall(organisationId, siteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdSitesSiteIdGet
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdGetCall(String organisationId, Integer siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/sites/{siteId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdGetValidateBeforeCall(String organisationId, Integer siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdSitesSiteIdGet(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceOrganisationsOrganisationIdSitesSiteIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdGetCall(organisationId, siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to get organisation site details
     * Sample request:                    GET /contact-service/organisations/1/site/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @return OrganisationSiteResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationSiteResponseInfo contactServiceOrganisationsOrganisationIdSitesSiteIdGet(String organisationId, Integer siteId) throws ApiException {
        ApiResponse<OrganisationSiteResponseInfo> resp = contactServiceOrganisationsOrganisationIdSitesSiteIdGetWithHttpInfo(organisationId, siteId);
        return resp.getData();
    }

    /**
     * Allows a user to get organisation site details
     * Sample request:                    GET /contact-service/organisations/1/site/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;OrganisationSiteResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationSiteResponseInfo> contactServiceOrganisationsOrganisationIdSitesSiteIdGetWithHttpInfo(String organisationId, Integer siteId) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdGetValidateBeforeCall(organisationId, siteId, null, null);
        Type localVarReturnType = new TypeToken<OrganisationSiteResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to get organisation site details (asynchronously)
     * Sample request:                    GET /contact-service/organisations/1/site/1
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdGetAsync(String organisationId, Integer siteId, final ApiCallback<OrganisationSiteResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdGetValidateBeforeCall(organisationId, siteId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationSiteResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationsOrganisationIdSitesSiteIdPut
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdPutCall(String organisationId, Integer siteId, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/organisations/{organisationId}/sites/{siteId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdPutValidateBeforeCall(String organisationId, Integer siteId, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationsOrganisationIdSitesSiteIdPut(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceOrganisationsOrganisationIdSitesSiteIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdPutCall(organisationId, siteId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to update organisation site
     * Sample request:                    PUT /contact-service/organisations/1/site/1      {        \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,        \&quot;address\&quot;: {          \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,          \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,          \&quot;region\&quot;: \&quot;CA.\&quot;,          \&quot;postalCode\&quot;: \&quot;94043\&quot;,          \&quot;countryCode\&quot;: \&quot;UK\&quot;        }      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceOrganisationsOrganisationIdSitesSiteIdPut(String organisationId, Integer siteId, OrganisationSiteInfo body) throws ApiException {
        contactServiceOrganisationsOrganisationIdSitesSiteIdPutWithHttpInfo(organisationId, siteId, body);
    }

    /**
     * Allows a user to update organisation site
     * Sample request:                    PUT /contact-service/organisations/1/site/1      {        \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,        \&quot;address\&quot;: {          \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,          \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,          \&quot;region\&quot;: \&quot;CA.\&quot;,          \&quot;postalCode\&quot;: \&quot;94043\&quot;,          \&quot;countryCode\&quot;: \&quot;UK\&quot;        }      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceOrganisationsOrganisationIdSitesSiteIdPutWithHttpInfo(String organisationId, Integer siteId, OrganisationSiteInfo body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdPutValidateBeforeCall(organisationId, siteId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Allows a user to update organisation site (asynchronously)
     * Sample request:                    PUT /contact-service/organisations/1/site/1      {        \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,        \&quot;address\&quot;: {          \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,          \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,          \&quot;region\&quot;: \&quot;CA.\&quot;,          \&quot;postalCode\&quot;: \&quot;94043\&quot;,          \&quot;countryCode\&quot;: \&quot;UK\&quot;        }      }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationsOrganisationIdSitesSiteIdPutAsync(String organisationId, Integer siteId, OrganisationSiteInfo body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationsOrganisationIdSitesSiteIdPutValidateBeforeCall(organisationId, siteId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
