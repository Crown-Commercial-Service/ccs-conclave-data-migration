/*
 * CcsSso.WrapperApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.OrganisationGroupList;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupNameInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupRequestInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationGroupApi {
    private ApiClient apiClient;

    public OrganisationGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationGroupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for organisationProfileorganisationIdGroupsGet
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGetCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search-string", searchString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGetValidateBeforeCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdGroupsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGetCall(organisationId, searchString, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation groups
     * Sample request:                    GET /organisation-profile1/groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return OrganisationGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationGroupList organisationProfileorganisationIdGroupsGet(String organisationId, String searchString) throws ApiException {
        ApiResponse<OrganisationGroupList> resp = organisationProfileorganisationIdGroupsGetWithHttpInfo(organisationId, searchString);
        return resp.getData();
    }

    /**
     * Get organisation groups
     * Sample request:                    GET /organisation-profile1/groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return ApiResponse&lt;OrganisationGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationGroupList> organisationProfileorganisationIdGroupsGetWithHttpInfo(String organisationId, String searchString) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGetValidateBeforeCall(organisationId, searchString, null, null);
        Type localVarReturnType = new TypeToken<OrganisationGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation groups (asynchronously)
     * Sample request:                    GET /organisation-profile1/groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGetAsync(String organisationId, String searchString, final ApiCallback<OrganisationGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGetValidateBeforeCall(organisationId, searchString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdGroupsGroupIdDelete
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdDeleteCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/groups/{groupId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdDeleteValidateBeforeCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdGroupsGroupIdDelete(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileorganisationIdGroupsGroupIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdDeleteCall(organisationId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete organisation group
     * Sample request:                    DELETE /organisation-profile1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileorganisationIdGroupsGroupIdDelete(String organisationId, Integer groupId) throws ApiException {
        organisationProfileorganisationIdGroupsGroupIdDeleteWithHttpInfo(organisationId, groupId);
    }

    /**
     * Delete organisation group
     * Sample request:                    DELETE /organisation-profile1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileorganisationIdGroupsGroupIdDeleteWithHttpInfo(String organisationId, Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdDeleteValidateBeforeCall(organisationId, groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete organisation group (asynchronously)
     * Sample request:                    DELETE /organisation-profile1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdDeleteAsync(String organisationId, Integer groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdDeleteValidateBeforeCall(organisationId, groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdGroupsGroupIdGet
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdGetCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/groups/{groupId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdGetValidateBeforeCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdGroupsGroupIdGet(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileorganisationIdGroupsGroupIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdGetCall(organisationId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation group
     * Sample request:                    GET /organisation-profile1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return OrganisationGroupResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationGroupResponseInfo organisationProfileorganisationIdGroupsGroupIdGet(String organisationId, Integer groupId) throws ApiException {
        ApiResponse<OrganisationGroupResponseInfo> resp = organisationProfileorganisationIdGroupsGroupIdGetWithHttpInfo(organisationId, groupId);
        return resp.getData();
    }

    /**
     * Get organisation group
     * Sample request:                    GET /organisation-profile1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;OrganisationGroupResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationGroupResponseInfo> organisationProfileorganisationIdGroupsGroupIdGetWithHttpInfo(String organisationId, Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdGetValidateBeforeCall(organisationId, groupId, null, null);
        Type localVarReturnType = new TypeToken<OrganisationGroupResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation group (asynchronously)
     * Sample request:                    GET /organisation-profile1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdGetAsync(String organisationId, Integer groupId, final ApiCallback<OrganisationGroupResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdGetValidateBeforeCall(organisationId, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationGroupResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdGroupsGroupIdPatch
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdPatchCall(String organisationId, Integer groupId, OrganisationGroupRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/groups/{groupId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdPatchValidateBeforeCall(String organisationId, Integer groupId, OrganisationGroupRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdGroupsGroupIdPatch(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileorganisationIdGroupsGroupIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdPatchCall(organisationId, groupId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update organisation group
     * Sample requests:                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;: null      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: null,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;: null      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileorganisationIdGroupsGroupIdPatch(String organisationId, Integer groupId, OrganisationGroupRequestInfo body) throws ApiException {
        organisationProfileorganisationIdGroupsGroupIdPatchWithHttpInfo(organisationId, groupId, body);
    }

    /**
     * Update organisation group
     * Sample requests:                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;: null      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: null,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;: null      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileorganisationIdGroupsGroupIdPatchWithHttpInfo(String organisationId, Integer groupId, OrganisationGroupRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdPatchValidateBeforeCall(organisationId, groupId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update organisation group (asynchronously)
     * Sample requests:                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;: null      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: null,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisation-profile1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;: null      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsGroupIdPatchAsync(String organisationId, Integer groupId, OrganisationGroupRequestInfo body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsGroupIdPatchValidateBeforeCall(organisationId, groupId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileorganisationIdGroupsPost
     * @param organisationId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsPostCall(String organisationId, OrganisationGroupNameInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile{organisationId}/groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileorganisationIdGroupsPostValidateBeforeCall(String organisationId, OrganisationGroupNameInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileorganisationIdGroupsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsPostCall(organisationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create organisation group
     * Sample request:                    POST /organisation-profile1/groups      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer organisationProfileorganisationIdGroupsPost(String organisationId, OrganisationGroupNameInfo body) throws ApiException {
        ApiResponse<Integer> resp = organisationProfileorganisationIdGroupsPostWithHttpInfo(organisationId, body);
        return resp.getData();
    }

    /**
     * Create organisation group
     * Sample request:                    POST /organisation-profile1/groups      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> organisationProfileorganisationIdGroupsPostWithHttpInfo(String organisationId, OrganisationGroupNameInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsPostValidateBeforeCall(organisationId, body, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create organisation group (asynchronously)
     * Sample request:                    POST /organisation-profile1/groups      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileorganisationIdGroupsPostAsync(String organisationId, OrganisationGroupNameInfo body, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileorganisationIdGroupsPostValidateBeforeCall(organisationId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
