/*
 * CcsSso.OrganisationApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.GroupUserListResponse;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupList;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupNameInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupRequestInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupResponseInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupServiceRoleGroupList;
import uk.gov.ccs.swagger.sso.model.OrganisationServiceRoleGroupRequestInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationServiceRoleGroupResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganisationGroupApi {
    private ApiClient apiClient;

    public OrganisationGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganisationGroupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for organisationProfileOrganisationIdGroupsGet
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGetCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search-string", searchString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGetValidateBeforeCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGetCall(organisationId, searchString, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation groups
     * Sample request:                    GET /organisation-profile/1/groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return OrganisationGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationGroupList organisationProfileOrganisationIdGroupsGet(String organisationId, String searchString) throws ApiException {
        ApiResponse<OrganisationGroupList> resp = organisationProfileOrganisationIdGroupsGetWithHttpInfo(organisationId, searchString);
        return resp.getData();
    }

    /**
     * Get organisation groups
     * Sample request:                    GET /organisation-profile/1/groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return ApiResponse&lt;OrganisationGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationGroupList> organisationProfileOrganisationIdGroupsGetWithHttpInfo(String organisationId, String searchString) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGetValidateBeforeCall(organisationId, searchString, null, null);
        Type localVarReturnType = new TypeToken<OrganisationGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation groups (asynchronously)
     * Sample request:                    GET /organisation-profile/1/groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGetAsync(String organisationId, String searchString, final ApiCallback<OrganisationGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGetValidateBeforeCall(organisationId, searchString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsGroupIdDelete
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdDeleteCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/{groupId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdDeleteValidateBeforeCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGroupIdDelete(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileOrganisationIdGroupsGroupIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdDeleteCall(organisationId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete organisation group
     * Sample request:                    DELETE /organisation-profile/1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileOrganisationIdGroupsGroupIdDelete(String organisationId, Integer groupId) throws ApiException {
        organisationProfileOrganisationIdGroupsGroupIdDeleteWithHttpInfo(organisationId, groupId);
    }

    /**
     * Delete organisation group
     * Sample request:                    DELETE /organisation-profile/1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileOrganisationIdGroupsGroupIdDeleteWithHttpInfo(String organisationId, Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdDeleteValidateBeforeCall(organisationId, groupId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete organisation group (asynchronously)
     * Sample request:                    DELETE /organisation-profile/1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdDeleteAsync(String organisationId, Integer groupId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdDeleteValidateBeforeCall(organisationId, groupId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsGroupIdGet
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdGetCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/{groupId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdGetValidateBeforeCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGroupIdGet(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileOrganisationIdGroupsGroupIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdGetCall(organisationId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation group
     * Sample request:                    GET /organisation-profile/1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return OrganisationGroupResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationGroupResponseInfo organisationProfileOrganisationIdGroupsGroupIdGet(String organisationId, Integer groupId) throws ApiException {
        ApiResponse<OrganisationGroupResponseInfo> resp = organisationProfileOrganisationIdGroupsGroupIdGetWithHttpInfo(organisationId, groupId);
        return resp.getData();
    }

    /**
     * Get organisation group
     * Sample request:                    GET /organisation-profile/1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;OrganisationGroupResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationGroupResponseInfo> organisationProfileOrganisationIdGroupsGroupIdGetWithHttpInfo(String organisationId, Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdGetValidateBeforeCall(organisationId, groupId, null, null);
        Type localVarReturnType = new TypeToken<OrganisationGroupResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation group (asynchronously)
     * Sample request:                    GET /organisation-profile/1/groups/1
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdGetAsync(String organisationId, Integer groupId, final ApiCallback<OrganisationGroupResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdGetValidateBeforeCall(organisationId, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationGroupResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsGroupIdGroupusersGet
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdGroupusersGetCall(String organisationId, Integer groupId, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/{groupId}/groupusers"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CurrentPage", currentPage));
        if (isPagination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IsPagination", isPagination));
        if (isPendingApproval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-pending-approval", isPendingApproval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdGroupusersGetValidateBeforeCall(String organisationId, Integer groupId, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGroupIdGroupusersGet(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileOrganisationIdGroupsGroupIdGroupusersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdGroupusersGetCall(organisationId, groupId, pageSize, currentPage, isPagination, isPendingApproval, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation group users and their role approval status
     * Sample request:                    GET /organisation-profile/1/groups/1/groupusers
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @return GroupUserListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupUserListResponse organisationProfileOrganisationIdGroupsGroupIdGroupusersGet(String organisationId, Integer groupId, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval) throws ApiException {
        ApiResponse<GroupUserListResponse> resp = organisationProfileOrganisationIdGroupsGroupIdGroupusersGetWithHttpInfo(organisationId, groupId, pageSize, currentPage, isPagination, isPendingApproval);
        return resp.getData();
    }

    /**
     * Get organisation group users and their role approval status
     * Sample request:                    GET /organisation-profile/1/groups/1/groupusers
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @return ApiResponse&lt;GroupUserListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupUserListResponse> organisationProfileOrganisationIdGroupsGroupIdGroupusersGetWithHttpInfo(String organisationId, Integer groupId, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdGroupusersGetValidateBeforeCall(organisationId, groupId, pageSize, currentPage, isPagination, isPendingApproval, null, null);
        Type localVarReturnType = new TypeToken<GroupUserListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation group users and their role approval status (asynchronously)
     * Sample request:                    GET /organisation-profile/1/groups/1/groupusers
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdGroupusersGetAsync(String organisationId, Integer groupId, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval, final ApiCallback<GroupUserListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdGroupusersGetValidateBeforeCall(organisationId, groupId, pageSize, currentPage, isPagination, isPendingApproval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupUserListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsGroupIdPatch
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdPatchCall(String organisationId, Integer groupId, OrganisationGroupRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/{groupId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdPatchValidateBeforeCall(String organisationId, Integer groupId, OrganisationGroupRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGroupIdPatch(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileOrganisationIdGroupsGroupIdPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdPatchCall(organisationId, groupId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update organisation group
     * Sample requests:                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;: null      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: null,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;: null      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileOrganisationIdGroupsGroupIdPatch(String organisationId, Integer groupId, OrganisationGroupRequestInfo body) throws ApiException {
        organisationProfileOrganisationIdGroupsGroupIdPatchWithHttpInfo(organisationId, groupId, body);
    }

    /**
     * Update organisation group
     * Sample requests:                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;: null      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: null,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;: null      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileOrganisationIdGroupsGroupIdPatchWithHttpInfo(String organisationId, Integer groupId, OrganisationGroupRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdPatchValidateBeforeCall(organisationId, groupId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update organisation group (asynchronously)
     * Sample requests:                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;: null      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: null,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;: null,        &#x27;userInfo&#x27;:{            &#x27;addedUserIds&#x27;: [ \&quot;user1@mail.com\&quot;, \&quot;user2@mail.com\&quot; ],            &#x27;addedUserIds&#x27;: [ \&quot;user3@mail.com\&quot; ]         }      }                    PATCH /organisations/1/groups/1      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;,        &#x27;roleInfo&#x27;:{            &#x27;addedRoleIds&#x27;: [ 1, 2 ],            &#x27;removedRoleIds&#x27;: [ 3 ]         },        &#x27;userInfo&#x27;: null      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdPatchAsync(String organisationId, Integer groupId, OrganisationGroupRequestInfo body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdPatchValidateBeforeCall(organisationId, groupId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGet
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/{groupId}/service-role-groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetValidateBeforeCall(String organisationId, Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGet(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetCall(organisationId, groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation group
     * Sample request:                    GET /organisation-profile/1/groups/1/service-role-groups
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return OrganisationServiceRoleGroupResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationServiceRoleGroupResponseInfo organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGet(String organisationId, Integer groupId) throws ApiException {
        ApiResponse<OrganisationServiceRoleGroupResponseInfo> resp = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetWithHttpInfo(organisationId, groupId);
        return resp.getData();
    }

    /**
     * Get organisation group
     * Sample request:                    GET /organisation-profile/1/groups/1/service-role-groups
     * @param organisationId  (required)
     * @param groupId  (required)
     * @return ApiResponse&lt;OrganisationServiceRoleGroupResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationServiceRoleGroupResponseInfo> organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetWithHttpInfo(String organisationId, Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetValidateBeforeCall(organisationId, groupId, null, null);
        Type localVarReturnType = new TypeToken<OrganisationServiceRoleGroupResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation group (asynchronously)
     * Sample request:                    GET /organisation-profile/1/groups/1/service-role-groups
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetAsync(String organisationId, Integer groupId, final ApiCallback<OrganisationServiceRoleGroupResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsGetValidateBeforeCall(organisationId, groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationServiceRoleGroupResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatch
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchCall(String organisationId, Integer groupId, OrganisationServiceRoleGroupRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/{groupId}/service-role-groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchValidateBeforeCall(String organisationId, Integer groupId, OrganisationServiceRoleGroupRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatch(Async)");
        }
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchCall(organisationId, groupId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update organisation group with service role group
     * Sample requests:                    PATCH /organisation-profile/1/groups/1/service-role-groups      {        \&quot;groupName\&quot;: \&quot;test\&quot;,        \&quot;groupType\&quot;: 0,        \&quot;serviceRoleGroupInfo\&quot;: {          \&quot;addedServiceRoleGroupIds\&quot;: [            1          ],          \&quot;removedServiceRoleGroupIds\&quot;: [            2          ]        },        \&quot;userInfo\&quot;: {          \&quot;addedUserIds\&quot;: [            \&quot;\&quot;          ],          \&quot;removedUserIds\&quot;: [            \&quot;\&quot;          ]        }      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatch(String organisationId, Integer groupId, OrganisationServiceRoleGroupRequestInfo body) throws ApiException {
        organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchWithHttpInfo(organisationId, groupId, body);
    }

    /**
     * Update organisation group with service role group
     * Sample requests:                    PATCH /organisation-profile/1/groups/1/service-role-groups      {        \&quot;groupName\&quot;: \&quot;test\&quot;,        \&quot;groupType\&quot;: 0,        \&quot;serviceRoleGroupInfo\&quot;: {          \&quot;addedServiceRoleGroupIds\&quot;: [            1          ],          \&quot;removedServiceRoleGroupIds\&quot;: [            2          ]        },        \&quot;userInfo\&quot;: {          \&quot;addedUserIds\&quot;: [            \&quot;\&quot;          ],          \&quot;removedUserIds\&quot;: [            \&quot;\&quot;          ]        }      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchWithHttpInfo(String organisationId, Integer groupId, OrganisationServiceRoleGroupRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchValidateBeforeCall(organisationId, groupId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update organisation group with service role group (asynchronously)
     * Sample requests:                    PATCH /organisation-profile/1/groups/1/service-role-groups      {        \&quot;groupName\&quot;: \&quot;test\&quot;,        \&quot;groupType\&quot;: 0,        \&quot;serviceRoleGroupInfo\&quot;: {          \&quot;addedServiceRoleGroupIds\&quot;: [            1          ],          \&quot;removedServiceRoleGroupIds\&quot;: [            2          ]        },        \&quot;userInfo\&quot;: {          \&quot;addedUserIds\&quot;: [            \&quot;\&quot;          ],          \&quot;removedUserIds\&quot;: [            \&quot;\&quot;          ]        }      }
     * @param organisationId  (required)
     * @param groupId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchAsync(String organisationId, Integer groupId, OrganisationServiceRoleGroupRequestInfo body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsGroupIdServiceRoleGroupsPatchValidateBeforeCall(organisationId, groupId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsPost
     * @param organisationId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsPostCall(String organisationId, OrganisationGroupNameInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsPostValidateBeforeCall(String organisationId, OrganisationGroupNameInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsPost(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsPostCall(organisationId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create organisation group
     * Sample request:                    POST /organisation-profile/1/groups      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer organisationProfileOrganisationIdGroupsPost(String organisationId, OrganisationGroupNameInfo body) throws ApiException {
        ApiResponse<Integer> resp = organisationProfileOrganisationIdGroupsPostWithHttpInfo(organisationId, body);
        return resp.getData();
    }

    /**
     * Create organisation group
     * Sample request:                    POST /organisation-profile/1/groups      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> organisationProfileOrganisationIdGroupsPostWithHttpInfo(String organisationId, OrganisationGroupNameInfo body) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsPostValidateBeforeCall(organisationId, body, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create organisation group (asynchronously)
     * Sample request:                    POST /organisation-profile/1/groups      {        &#x27;groupName&#x27;: \&quot;Group Name\&quot;      }
     * @param organisationId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsPostAsync(String organisationId, OrganisationGroupNameInfo body, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsPostValidateBeforeCall(organisationId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for organisationProfileOrganisationIdGroupsServiceRoleGroupsGet
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsServiceRoleGroupsGetCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/organisation-profile/{organisationId}/groups/service-role-groups"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search-string", searchString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsServiceRoleGroupsGetValidateBeforeCall(String organisationId, String searchString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling organisationProfileOrganisationIdGroupsServiceRoleGroupsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsServiceRoleGroupsGetCall(organisationId, searchString, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get organisation groups
     * Sample request:                    GET /organisation-profile/1/groups/service-role-groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return OrganisationGroupServiceRoleGroupList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationGroupServiceRoleGroupList organisationProfileOrganisationIdGroupsServiceRoleGroupsGet(String organisationId, String searchString) throws ApiException {
        ApiResponse<OrganisationGroupServiceRoleGroupList> resp = organisationProfileOrganisationIdGroupsServiceRoleGroupsGetWithHttpInfo(organisationId, searchString);
        return resp.getData();
    }

    /**
     * Get organisation groups
     * Sample request:                    GET /organisation-profile/1/groups/service-role-groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @return ApiResponse&lt;OrganisationGroupServiceRoleGroupList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationGroupServiceRoleGroupList> organisationProfileOrganisationIdGroupsServiceRoleGroupsGetWithHttpInfo(String organisationId, String searchString) throws ApiException {
        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsServiceRoleGroupsGetValidateBeforeCall(organisationId, searchString, null, null);
        Type localVarReturnType = new TypeToken<OrganisationGroupServiceRoleGroupList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get organisation groups (asynchronously)
     * Sample request:                    GET /organisation-profile/1/groups/service-role-groups
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call organisationProfileOrganisationIdGroupsServiceRoleGroupsGetAsync(String organisationId, String searchString, final ApiCallback<OrganisationGroupServiceRoleGroupList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = organisationProfileOrganisationIdGroupsServiceRoleGroupsGetValidateBeforeCall(organisationId, searchString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationGroupServiceRoleGroupList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
