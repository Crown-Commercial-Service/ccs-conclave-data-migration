/*
 * CcsSso.ContactApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.ContactAssignmentWithOrgInfo;
import uk.gov.ccs.swagger.sso.model.OrganisationSite;
import uk.gov.ccs.swagger.sso.model.OrganisationSiteInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactSiteApi {
    private ApiClient apiClient;

    public ContactSiteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactSiteApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for contactServiceOrganisationIdSitesSiteIdContactsAssignmentDelete
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param orgPartyId  (optional)
     * @param contactPointIds  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteCall(String organisationId, Integer siteId, Integer orgPartyId, String contactPointIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/{organisationId}/sites/{siteId}/contacts/assignment"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (orgPartyId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("org-party-id", orgPartyId));
        if (contactPointIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contact-point-ids", contactPointIds));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteValidateBeforeCall(String organisationId, Integer siteId, Integer orgPartyId, String contactPointIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationIdSitesSiteIdContactsAssignmentDelete(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceOrganisationIdSitesSiteIdContactsAssignmentDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteCall(organisationId, siteId, orgPartyId, contactPointIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to unassign contacts from an organisation site.  Should provide the assigned contacts contactpoint ids as a query parameter list
     * Sample request:                    DELETE /contact-service/1/sites/1/contacts/assignment?org-party-id&#x3D;1,contactPointIds&#x3D;1,2
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param orgPartyId  (optional)
     * @param contactPointIds  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceOrganisationIdSitesSiteIdContactsAssignmentDelete(String organisationId, Integer siteId, Integer orgPartyId, String contactPointIds) throws ApiException {
        contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteWithHttpInfo(organisationId, siteId, orgPartyId, contactPointIds);
    }

    /**
     * Allows a user to unassign contacts from an organisation site.  Should provide the assigned contacts contactpoint ids as a query parameter list
     * Sample request:                    DELETE /contact-service/1/sites/1/contacts/assignment?org-party-id&#x3D;1,contactPointIds&#x3D;1,2
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param orgPartyId  (optional)
     * @param contactPointIds  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteWithHttpInfo(String organisationId, Integer siteId, Integer orgPartyId, String contactPointIds) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteValidateBeforeCall(organisationId, siteId, orgPartyId, contactPointIds, null, null);
        return apiClient.execute(call);
    }

    /**
     * Allows a user to unassign contacts from an organisation site.  Should provide the assigned contacts contactpoint ids as a query parameter list (asynchronously)
     * Sample request:                    DELETE /contact-service/1/sites/1/contacts/assignment?org-party-id&#x3D;1,contactPointIds&#x3D;1,2
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param orgPartyId  (optional)
     * @param contactPointIds  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteAsync(String organisationId, Integer siteId, Integer orgPartyId, String contactPointIds, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationIdSitesSiteIdContactsAssignmentDeleteValidateBeforeCall(organisationId, siteId, orgPartyId, contactPointIds, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for contactServiceOrganisationIdSitesSiteIdContactsAssignmentPost
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostCall(String organisationId, Integer siteId, ContactAssignmentWithOrgInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/{organisationId}/sites/{siteId}/contacts/assignment"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostValidateBeforeCall(String organisationId, Integer siteId, ContactAssignmentWithOrgInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling contactServiceOrganisationIdSitesSiteIdContactsAssignmentPost(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceOrganisationIdSitesSiteIdContactsAssignmentPost(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostCall(organisationId, siteId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to assign user contacts for an organisation site
     * Sample request:                     POST /contact-service/1/sites/1/contacts/assignment       {         \&quot;AssigningContactType\&quot;: 1, (User:1, Site:2 Only user contacts are valid here)         \&quot;AssigningContactPointIds\&quot;: [1, 2],         \&quot;AssigningContactsUserId\&quot;: \&quot;user@mail.com\&quot;       }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Integer> contactServiceOrganisationIdSitesSiteIdContactsAssignmentPost(String organisationId, Integer siteId, ContactAssignmentWithOrgInfo body) throws ApiException {
        ApiResponse<List<Integer>> resp = contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostWithHttpInfo(organisationId, siteId, body);
        return resp.getData();
    }

    /**
     * Allows a user to assign user contacts for an organisation site
     * Sample request:                     POST /contact-service/1/sites/1/contacts/assignment       {         \&quot;AssigningContactType\&quot;: 1, (User:1, Site:2 Only user contacts are valid here)         \&quot;AssigningContactPointIds\&quot;: [1, 2],         \&quot;AssigningContactsUserId\&quot;: \&quot;user@mail.com\&quot;       }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Integer>> contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostWithHttpInfo(String organisationId, Integer siteId, ContactAssignmentWithOrgInfo body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostValidateBeforeCall(organisationId, siteId, body, null, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to assign user contacts for an organisation site (asynchronously)
     * Sample request:                     POST /contact-service/1/sites/1/contacts/assignment       {         \&quot;AssigningContactType\&quot;: 1, (User:1, Site:2 Only user contacts are valid here)         \&quot;AssigningContactPointIds\&quot;: [1, 2],         \&quot;AssigningContactsUserId\&quot;: \&quot;user@mail.com\&quot;       }
     * @param organisationId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostAsync(String organisationId, Integer siteId, ContactAssignmentWithOrgInfo body, final ApiCallback<List<Integer>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceOrganisationIdSitesSiteIdContactsAssignmentPostValidateBeforeCall(organisationId, siteId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceSitePartyIdGet
     * @param partyId  (required)
     * @param isSite  (optional, default to false)
     * @param siteId  (optional, default to 0)
     * @param siteNameSerachString  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdGetCall(Integer partyId, Boolean isSite, Integer siteId, String siteNameSerachString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/site/{partyId}"
            .replaceAll("\\{" + "partyId" + "\\}", apiClient.escapeString(partyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isSite != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isSite", isSite));
        if (siteId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("siteId", siteId));
        if (siteNameSerachString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("siteNameSerachString", siteNameSerachString));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceSitePartyIdGetValidateBeforeCall(Integer partyId, Boolean isSite, Integer siteId, String siteNameSerachString, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling contactServiceSitePartyIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceSitePartyIdGetCall(partyId, isSite, siteId, siteNameSerachString, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get site details
     * Sample request:                    GET contact-service/site/1?siteId&#x3D;1,siteNameSerachString&#x3D;sitename
     * @param partyId  (required)
     * @param isSite  (optional, default to false)
     * @param siteId  (optional, default to 0)
     * @param siteNameSerachString  (optional)
     * @return List&lt;OrganisationSite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrganisationSite> contactServiceSitePartyIdGet(Integer partyId, Boolean isSite, Integer siteId, String siteNameSerachString) throws ApiException {
        ApiResponse<List<OrganisationSite>> resp = contactServiceSitePartyIdGetWithHttpInfo(partyId, isSite, siteId, siteNameSerachString);
        return resp.getData();
    }

    /**
     * Get site details
     * Sample request:                    GET contact-service/site/1?siteId&#x3D;1,siteNameSerachString&#x3D;sitename
     * @param partyId  (required)
     * @param isSite  (optional, default to false)
     * @param siteId  (optional, default to 0)
     * @param siteNameSerachString  (optional)
     * @return ApiResponse&lt;List&lt;OrganisationSite&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrganisationSite>> contactServiceSitePartyIdGetWithHttpInfo(Integer partyId, Boolean isSite, Integer siteId, String siteNameSerachString) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceSitePartyIdGetValidateBeforeCall(partyId, isSite, siteId, siteNameSerachString, null, null);
        Type localVarReturnType = new TypeToken<List<OrganisationSite>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get site details (asynchronously)
     * Sample request:                    GET contact-service/site/1?siteId&#x3D;1,siteNameSerachString&#x3D;sitename
     * @param partyId  (required)
     * @param isSite  (optional, default to false)
     * @param siteId  (optional, default to 0)
     * @param siteNameSerachString  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdGetAsync(Integer partyId, Boolean isSite, Integer siteId, String siteNameSerachString, final ApiCallback<List<OrganisationSite>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceSitePartyIdGetValidateBeforeCall(partyId, isSite, siteId, siteNameSerachString, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrganisationSite>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceSitePartyIdPartyTypeIdReasonPost
     * @param partyId  (required)
     * @param partyTypeId  (required)
     * @param reason  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdPartyTypeIdReasonPostCall(Integer partyId, Integer partyTypeId, String reason, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/site/{partyId}/{partyTypeId}/{reason}"
            .replaceAll("\\{" + "partyId" + "\\}", apiClient.escapeString(partyId.toString()))
            .replaceAll("\\{" + "partyTypeId" + "\\}", apiClient.escapeString(partyTypeId.toString()))
            .replaceAll("\\{" + "reason" + "\\}", apiClient.escapeString(reason.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceSitePartyIdPartyTypeIdReasonPostValidateBeforeCall(Integer partyId, Integer partyTypeId, String reason, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling contactServiceSitePartyIdPartyTypeIdReasonPost(Async)");
        }
        // verify the required parameter 'partyTypeId' is set
        if (partyTypeId == null) {
            throw new ApiException("Missing the required parameter 'partyTypeId' when calling contactServiceSitePartyIdPartyTypeIdReasonPost(Async)");
        }
        // verify the required parameter 'reason' is set
        if (reason == null) {
            throw new ApiException("Missing the required parameter 'reason' when calling contactServiceSitePartyIdPartyTypeIdReasonPost(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceSitePartyIdPartyTypeIdReasonPostCall(partyId, partyTypeId, reason, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create site contact
     * Sample request:        POST contact-service/site/1/1/1      {      \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,      \&quot;address\&quot;: {      \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,     \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,     \&quot;region\&quot;: \&quot;CA.\&quot;,     \&quot;postalCode\&quot;: \&quot;94043\&quot;,     \&quot;countryCode\&quot;: \&quot;US\&quot;      }      }
     * @param partyId  (required)
     * @param partyTypeId  (required)
     * @param reason  (required)
     * @param body  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer contactServiceSitePartyIdPartyTypeIdReasonPost(Integer partyId, Integer partyTypeId, String reason, OrganisationSiteInfo body) throws ApiException {
        ApiResponse<Integer> resp = contactServiceSitePartyIdPartyTypeIdReasonPostWithHttpInfo(partyId, partyTypeId, reason, body);
        return resp.getData();
    }

    /**
     * Create site contact
     * Sample request:        POST contact-service/site/1/1/1      {      \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,      \&quot;address\&quot;: {      \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,     \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,     \&quot;region\&quot;: \&quot;CA.\&quot;,     \&quot;postalCode\&quot;: \&quot;94043\&quot;,     \&quot;countryCode\&quot;: \&quot;US\&quot;      }      }
     * @param partyId  (required)
     * @param partyTypeId  (required)
     * @param reason  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> contactServiceSitePartyIdPartyTypeIdReasonPostWithHttpInfo(Integer partyId, Integer partyTypeId, String reason, OrganisationSiteInfo body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceSitePartyIdPartyTypeIdReasonPostValidateBeforeCall(partyId, partyTypeId, reason, body, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create site contact (asynchronously)
     * Sample request:        POST contact-service/site/1/1/1      {      \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,      \&quot;address\&quot;: {      \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,     \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,     \&quot;region\&quot;: \&quot;CA.\&quot;,     \&quot;postalCode\&quot;: \&quot;94043\&quot;,     \&quot;countryCode\&quot;: \&quot;US\&quot;      }      }
     * @param partyId  (required)
     * @param partyTypeId  (required)
     * @param reason  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdPartyTypeIdReasonPostAsync(Integer partyId, Integer partyTypeId, String reason, OrganisationSiteInfo body, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceSitePartyIdPartyTypeIdReasonPostValidateBeforeCall(partyId, partyTypeId, reason, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for contactServiceSitePartyIdSiteIdDelete
     * @param partyId  (required)
     * @param siteId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdSiteIdDeleteCall(Integer partyId, Integer siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/contact-service/site/{partyId}/{siteId}"
            .replaceAll("\\{" + "partyId" + "\\}", apiClient.escapeString(partyId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceSitePartyIdSiteIdDeleteValidateBeforeCall(Integer partyId, Integer siteId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling contactServiceSitePartyIdSiteIdDelete(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceSitePartyIdSiteIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceSitePartyIdSiteIdDeleteCall(partyId, siteId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete contactpoint details
     * Sample request:                    DELETE contact-service/site/1/1
     * @param partyId  (required)
     * @param siteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceSitePartyIdSiteIdDelete(Integer partyId, Integer siteId) throws ApiException {
        contactServiceSitePartyIdSiteIdDeleteWithHttpInfo(partyId, siteId);
    }

    /**
     * Delete contactpoint details
     * Sample request:                    DELETE contact-service/site/1/1
     * @param partyId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceSitePartyIdSiteIdDeleteWithHttpInfo(Integer partyId, Integer siteId) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceSitePartyIdSiteIdDeleteValidateBeforeCall(partyId, siteId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete contactpoint details (asynchronously)
     * Sample request:                    DELETE contact-service/site/1/1
     * @param partyId  (required)
     * @param siteId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdSiteIdDeleteAsync(Integer partyId, Integer siteId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceSitePartyIdSiteIdDeleteValidateBeforeCall(partyId, siteId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for contactServiceSitePartyIdSiteIdPut
     * @param partyId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdSiteIdPutCall(Integer partyId, Integer siteId, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/contact-service/site/{partyId}/{siteId}"
            .replaceAll("\\{" + "partyId" + "\\}", apiClient.escapeString(partyId.toString()))
            .replaceAll("\\{" + "siteId" + "\\}", apiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call contactServiceSitePartyIdSiteIdPutValidateBeforeCall(Integer partyId, Integer siteId, OrganisationSiteInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling contactServiceSitePartyIdSiteIdPut(Async)");
        }
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling contactServiceSitePartyIdSiteIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = contactServiceSitePartyIdSiteIdPutCall(partyId, siteId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update site details
     * Sample request:        PUT contact-service/site/1/1      {       \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,       \&quot;address\&quot;: {       \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,       \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,       \&quot;region\&quot;: \&quot;CA.\&quot;,       \&quot;postalCode\&quot;: \&quot;94043\&quot;,       \&quot;countryCode\&quot;: \&quot;US\&quot;       }      }
     * @param partyId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void contactServiceSitePartyIdSiteIdPut(Integer partyId, Integer siteId, OrganisationSiteInfo body) throws ApiException {
        contactServiceSitePartyIdSiteIdPutWithHttpInfo(partyId, siteId, body);
    }

    /**
     * Update site details
     * Sample request:        PUT contact-service/site/1/1      {       \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,       \&quot;address\&quot;: {       \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,       \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,       \&quot;region\&quot;: \&quot;CA.\&quot;,       \&quot;postalCode\&quot;: \&quot;94043\&quot;,       \&quot;countryCode\&quot;: \&quot;US\&quot;       }      }
     * @param partyId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> contactServiceSitePartyIdSiteIdPutWithHttpInfo(Integer partyId, Integer siteId, OrganisationSiteInfo body) throws ApiException {
        com.squareup.okhttp.Call call = contactServiceSitePartyIdSiteIdPutValidateBeforeCall(partyId, siteId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update site details (asynchronously)
     * Sample request:        PUT contact-service/site/1/1      {       \&quot;siteName\&quot;: \&quot;Main Branch\&quot;,       \&quot;address\&quot;: {       \&quot;streetAddress\&quot;: \&quot;1600 Amphitheatre Pkwy\&quot;,       \&quot;locality\&quot;: \&quot;Mountain View.\&quot;,       \&quot;region\&quot;: \&quot;CA.\&quot;,       \&quot;postalCode\&quot;: \&quot;94043\&quot;,       \&quot;countryCode\&quot;: \&quot;US\&quot;       }      }
     * @param partyId  (required)
     * @param siteId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call contactServiceSitePartyIdSiteIdPutAsync(Integer partyId, Integer siteId, OrganisationSiteInfo body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = contactServiceSitePartyIdSiteIdPutValidateBeforeCall(partyId, siteId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
