/*
 * CcsSso.UserApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.GroupUserListResponse;
import uk.gov.ccs.swagger.sso.model.GroupUsersModifiedList;
import uk.gov.ccs.swagger.sso.model.GroupUsersUpdateRequest;
import uk.gov.ccs.swagger.sso.model.UserGroupMembershipInfoRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserGroupApi {
    private ApiClient apiClient;

    public UserGroupApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserGroupApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for userProfileGroupsGroupIdDelete
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsGroupIdDeleteCall(Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/groups/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileGroupsGroupIdDeleteValidateBeforeCall(Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling userProfileGroupsGroupIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = userProfileGroupsGroupIdDeleteCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete users in the group
     * Sample request:                    DELETE /user-profile/groups/1
     * @param groupId  (required)
     * @return UserGroupMembershipInfoRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGroupMembershipInfoRequest userProfileGroupsGroupIdDelete(Integer groupId) throws ApiException {
        ApiResponse<UserGroupMembershipInfoRequest> resp = userProfileGroupsGroupIdDeleteWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Delete users in the group
     * Sample request:                    DELETE /user-profile/groups/1
     * @param groupId  (required)
     * @return ApiResponse&lt;UserGroupMembershipInfoRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGroupMembershipInfoRequest> userProfileGroupsGroupIdDeleteWithHttpInfo(Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileGroupsGroupIdDeleteValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<UserGroupMembershipInfoRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete users in the group (asynchronously)
     * Sample request:                    DELETE /user-profile/groups/1
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsGroupIdDeleteAsync(Integer groupId, final ApiCallback<UserGroupMembershipInfoRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileGroupsGroupIdDeleteValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGroupMembershipInfoRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileGroupsGroupIdGet
     * @param groupId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsGroupIdGetCall(Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/groups/{groupId}"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileGroupsGroupIdGetValidateBeforeCall(Integer groupId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling userProfileGroupsGroupIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = userProfileGroupsGroupIdGetCall(groupId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get users from the group
     * Sample request:        GET /user-profile/groups/1
     * @param groupId  (required)
     * @return UserGroupMembershipInfoRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserGroupMembershipInfoRequest userProfileGroupsGroupIdGet(Integer groupId) throws ApiException {
        ApiResponse<UserGroupMembershipInfoRequest> resp = userProfileGroupsGroupIdGetWithHttpInfo(groupId);
        return resp.getData();
    }

    /**
     * Get users from the group
     * Sample request:        GET /user-profile/groups/1
     * @param groupId  (required)
     * @return ApiResponse&lt;UserGroupMembershipInfoRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserGroupMembershipInfoRequest> userProfileGroupsGroupIdGetWithHttpInfo(Integer groupId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileGroupsGroupIdGetValidateBeforeCall(groupId, null, null);
        Type localVarReturnType = new TypeToken<UserGroupMembershipInfoRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get users from the group (asynchronously)
     * Sample request:        GET /user-profile/groups/1
     * @param groupId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsGroupIdGetAsync(Integer groupId, final ApiCallback<UserGroupMembershipInfoRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileGroupsGroupIdGetValidateBeforeCall(groupId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserGroupMembershipInfoRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileGroupsGroupIdUsersGet
     * @param groupId  (required)
     * @param groupType  (optional)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsGroupIdUsersGetCall(Integer groupId, Integer groupType, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/groups/{groupId}/users"
            .replaceAll("\\{" + "groupId" + "\\}", apiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("group-type", groupType));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("PageSize", pageSize));
        if (currentPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CurrentPage", currentPage));
        if (isPagination != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("IsPagination", isPagination));
        if (isPendingApproval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-pending-approval", isPendingApproval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileGroupsGroupIdUsersGetValidateBeforeCall(Integer groupId, Integer groupType, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling userProfileGroupsGroupIdUsersGet(Async)");
        }
        
        com.squareup.okhttp.Call call = userProfileGroupsGroupIdUsersGetCall(groupId, groupType, pageSize, currentPage, isPagination, isPendingApproval, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of user with pending role approval status
     * Sample request:        GET/user-profile/groups/1/users?group-type&#x3D;0
     * @param groupId  (required)
     * @param groupType  (optional)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @return GroupUserListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupUserListResponse userProfileGroupsGroupIdUsersGet(Integer groupId, Integer groupType, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval) throws ApiException {
        ApiResponse<GroupUserListResponse> resp = userProfileGroupsGroupIdUsersGetWithHttpInfo(groupId, groupType, pageSize, currentPage, isPagination, isPendingApproval);
        return resp.getData();
    }

    /**
     * Get list of user with pending role approval status
     * Sample request:        GET/user-profile/groups/1/users?group-type&#x3D;0
     * @param groupId  (required)
     * @param groupType  (optional)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @return ApiResponse&lt;GroupUserListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupUserListResponse> userProfileGroupsGroupIdUsersGetWithHttpInfo(Integer groupId, Integer groupType, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval) throws ApiException {
        com.squareup.okhttp.Call call = userProfileGroupsGroupIdUsersGetValidateBeforeCall(groupId, groupType, pageSize, currentPage, isPagination, isPendingApproval, null, null);
        Type localVarReturnType = new TypeToken<GroupUserListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of user with pending role approval status (asynchronously)
     * Sample request:        GET/user-profile/groups/1/users?group-type&#x3D;0
     * @param groupId  (required)
     * @param groupType  (optional)
     * @param pageSize  (optional)
     * @param currentPage  (optional)
     * @param isPagination  (optional)
     * @param isPendingApproval  (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsGroupIdUsersGetAsync(Integer groupId, Integer groupType, Integer pageSize, Integer currentPage, Boolean isPagination, Boolean isPendingApproval, final ApiCallback<GroupUserListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileGroupsGroupIdUsersGetValidateBeforeCall(groupId, groupType, pageSize, currentPage, isPagination, isPendingApproval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupUserListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileGroupsPut
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsPutCall(GroupUsersUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileGroupsPutValidateBeforeCall(GroupUsersUpdateRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileGroupsPutCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update users in the group
     * Sample request:                    PUT /user-profile/groups      {       \&quot;groupId\&quot;: 1,       \&quot;organisationGroupRequestInfo\&quot;: {         \&quot;groupName\&quot;: \&quot;UserGroup\&quot;,         \&quot;groupType\&quot;: 0,         \&quot;roleInfo\&quot;: {           \&quot;addedRoleIds\&quot;: [            1           ],           \&quot;removedRoleIds\&quot;: [             1           ]       },         \&quot;userInfo\&quot;: {           \&quot;addedUserIds\&quot;: [             \&quot;user1@yopmail.com\&quot;           ],           \&quot;removedUserIds\&quot;: [             \&quot;user1@yopmail.com\&quot;           ]       }           },       \&quot;requestUserId\&quot;: 1,       \&quot;organisationId\&quot;: 1,       \&quot;anyRoleRequiredApproval\&quot;: false,       \&quot;mfaEnableRoleExists\&quot;: false,       \&quot;isRoleApprovalEnable\&quot;: true,       \&quot;groupType\&quot;: 0,       \&quot;orgAdminRoleId\&quot;: 1612,       \&quot;groupEligibleRoles\&quot;: [         1       ],       \&quot;ciiOrganisationId\&quot;: \&quot;1234\&quot;,       \&quot;domainName\&quot;: \&quot;test.com\&quot;      }
     * @param body  (optional)
     * @return GroupUsersModifiedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GroupUsersModifiedList userProfileGroupsPut(GroupUsersUpdateRequest body) throws ApiException {
        ApiResponse<GroupUsersModifiedList> resp = userProfileGroupsPutWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Update users in the group
     * Sample request:                    PUT /user-profile/groups      {       \&quot;groupId\&quot;: 1,       \&quot;organisationGroupRequestInfo\&quot;: {         \&quot;groupName\&quot;: \&quot;UserGroup\&quot;,         \&quot;groupType\&quot;: 0,         \&quot;roleInfo\&quot;: {           \&quot;addedRoleIds\&quot;: [            1           ],           \&quot;removedRoleIds\&quot;: [             1           ]       },         \&quot;userInfo\&quot;: {           \&quot;addedUserIds\&quot;: [             \&quot;user1@yopmail.com\&quot;           ],           \&quot;removedUserIds\&quot;: [             \&quot;user1@yopmail.com\&quot;           ]       }           },       \&quot;requestUserId\&quot;: 1,       \&quot;organisationId\&quot;: 1,       \&quot;anyRoleRequiredApproval\&quot;: false,       \&quot;mfaEnableRoleExists\&quot;: false,       \&quot;isRoleApprovalEnable\&quot;: true,       \&quot;groupType\&quot;: 0,       \&quot;orgAdminRoleId\&quot;: 1612,       \&quot;groupEligibleRoles\&quot;: [         1       ],       \&quot;ciiOrganisationId\&quot;: \&quot;1234\&quot;,       \&quot;domainName\&quot;: \&quot;test.com\&quot;      }
     * @param body  (optional)
     * @return ApiResponse&lt;GroupUsersModifiedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GroupUsersModifiedList> userProfileGroupsPutWithHttpInfo(GroupUsersUpdateRequest body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileGroupsPutValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<GroupUsersModifiedList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update users in the group (asynchronously)
     * Sample request:                    PUT /user-profile/groups      {       \&quot;groupId\&quot;: 1,       \&quot;organisationGroupRequestInfo\&quot;: {         \&quot;groupName\&quot;: \&quot;UserGroup\&quot;,         \&quot;groupType\&quot;: 0,         \&quot;roleInfo\&quot;: {           \&quot;addedRoleIds\&quot;: [            1           ],           \&quot;removedRoleIds\&quot;: [             1           ]       },         \&quot;userInfo\&quot;: {           \&quot;addedUserIds\&quot;: [             \&quot;user1@yopmail.com\&quot;           ],           \&quot;removedUserIds\&quot;: [             \&quot;user1@yopmail.com\&quot;           ]       }           },       \&quot;requestUserId\&quot;: 1,       \&quot;organisationId\&quot;: 1,       \&quot;anyRoleRequiredApproval\&quot;: false,       \&quot;mfaEnableRoleExists\&quot;: false,       \&quot;isRoleApprovalEnable\&quot;: true,       \&quot;groupType\&quot;: 0,       \&quot;orgAdminRoleId\&quot;: 1612,       \&quot;groupEligibleRoles\&quot;: [         1       ],       \&quot;ciiOrganisationId\&quot;: \&quot;1234\&quot;,       \&quot;domainName\&quot;: \&quot;test.com\&quot;      }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileGroupsPutAsync(GroupUsersUpdateRequest body, final ApiCallback<GroupUsersModifiedList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileGroupsPutValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GroupUsersModifiedList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
