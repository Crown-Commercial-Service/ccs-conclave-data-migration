/*
 * CcsSso.UserApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.OrganisationJoinRequest;
import uk.gov.ccs.swagger.sso.model.ServicePermissionDto;
import uk.gov.ccs.swagger.sso.model.UserEditResponseInfo;
import uk.gov.ccs.swagger.sso.model.UserListForOrganisationInfo;
import uk.gov.ccs.swagger.sso.model.UserNameListResponse;
import uk.gov.ccs.swagger.sso.model.UserProfileEditRequestInfo;
import uk.gov.ccs.swagger.sso.model.UserProfileResponseInfo;
import uk.gov.ccs.swagger.sso.model.UserProfileServiceRoleGroupEditRequestInfo;
import uk.gov.ccs.swagger.sso.model.UserProfileServiceRoleGroupResponseInfo;
import uk.gov.ccs.swagger.sso.model.UserToDeleteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient apiClient;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for userProfileAccountVerificationPut
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileAccountVerificationPutCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/account-verification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileAccountVerificationPutValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileAccountVerificationPutCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Updates user account verify state
     * Sample request:                    PUT user-profile/account-verification?user-id&#x3D;123
     * @param userId  (optional)
     * @return UserEditResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEditResponseInfo userProfileAccountVerificationPut(String userId) throws ApiException {
        ApiResponse<UserEditResponseInfo> resp = userProfileAccountVerificationPutWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Updates user account verify state
     * Sample request:                    PUT user-profile/account-verification?user-id&#x3D;123
     * @param userId  (optional)
     * @return ApiResponse&lt;UserEditResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEditResponseInfo> userProfileAccountVerificationPutWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileAccountVerificationPutValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates user account verify state (asynchronously)
     * Sample request:                    PUT user-profile/account-verification?user-id&#x3D;123
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileAccountVerificationPutAsync(String userId, final ApiCallback<UserEditResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileAccountVerificationPutValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileAdminDelete
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminDeleteCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/admin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileAdminDeleteValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileAdminDeleteCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a user
     * Sample request:                    DELETE /user-profile/admin?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean userProfileAdminDelete(String userId) throws ApiException {
        ApiResponse<Boolean> resp = userProfileAdminDeleteWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Delete a user
     * Sample request:                    DELETE /user-profile/admin?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> userProfileAdminDeleteWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileAdminDeleteValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a user (asynchronously)
     * Sample request:                    DELETE /user-profile/admin?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminDeleteAsync(String userId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileAdminDeleteValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileAdminPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminPostCall(UserProfileEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/admin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileAdminPostValidateBeforeCall(UserProfileEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileAdminPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create admin user details
     * Sample request:                    POST /user-profile/admin      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;123\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: { 1, 2 },            \&quot;roleIds\&quot;: { 1, 2 },            \&quot;identityProviderId\&quot;: 1,         }       }
     * @param body  (optional)
     * @return UserEditResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEditResponseInfo userProfileAdminPost(UserProfileEditRequestInfo body) throws ApiException {
        ApiResponse<UserEditResponseInfo> resp = userProfileAdminPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Allows a user to create admin user details
     * Sample request:                    POST /user-profile/admin      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;123\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: { 1, 2 },            \&quot;roleIds\&quot;: { 1, 2 },            \&quot;identityProviderId\&quot;: 1,         }       }
     * @param body  (optional)
     * @return ApiResponse&lt;UserEditResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEditResponseInfo> userProfileAdminPostWithHttpInfo(UserProfileEditRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileAdminPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create admin user details (asynchronously)
     * Sample request:                    POST /user-profile/admin      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;123\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: { 1, 2 },            \&quot;roleIds\&quot;: { 1, 2 },            \&quot;identityProviderId\&quot;: 1,         }       }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminPostAsync(UserProfileEditRequestInfo body, final ApiCallback<UserEditResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileAdminPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileAdminRolesDelete
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminRolesDeleteCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/admin-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileAdminRolesDeleteValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileAdminRolesDeleteCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unassign admin role for user
     * Sample request:                    DELETE /user-profile/admin-roles?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfileAdminRolesDelete(String userId) throws ApiException {
        userProfileAdminRolesDeleteWithHttpInfo(userId);
    }

    /**
     * Unassign admin role for user
     * Sample request:                    DELETE /user-profile/admin-roles?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfileAdminRolesDeleteWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileAdminRolesDeleteValidateBeforeCall(userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unassign admin role for user (asynchronously)
     * Sample request:                    DELETE /user-profile/admin-roles?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminRolesDeleteAsync(String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileAdminRolesDeleteValidateBeforeCall(userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfileAdminRolesPut
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminRolesPutCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/admin-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileAdminRolesPutValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileAdminRolesPutCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Assign admin role to user
     * Sample request:                    PUT /user-profile/admin-roles?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfileAdminRolesPut(String userId) throws ApiException {
        userProfileAdminRolesPutWithHttpInfo(userId);
    }

    /**
     * Assign admin role to user
     * Sample request:                    PUT /user-profile/admin-roles?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfileAdminRolesPutWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileAdminRolesPutValidateBeforeCall(userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Assign admin role to user (asynchronously)
     * Sample request:                    PUT /user-profile/admin-roles?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileAdminRolesPutAsync(String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileAdminRolesPutValidateBeforeCall(userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfileDelete
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileDeleteCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileDeleteValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileDeleteCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a user
     * Sample request:                    DELETE /user-profile?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfileDelete(String userId) throws ApiException {
        userProfileDeleteWithHttpInfo(userId);
    }

    /**
     * Delete a user
     * Sample request:                    DELETE /user-profile?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfileDeleteWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileDeleteValidateBeforeCall(userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a user (asynchronously)
     * Sample request:                    DELETE /user-profile?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileDeleteAsync(String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileDeleteValidateBeforeCall(userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfileGet
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileGetCall(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));
        if (isDelegated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-delegated", isDelegated));
        if (isDelegatedSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-delegated-search", isDelegatedSearch));
        if (delegatedOrganisationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delegated-organisation-id", delegatedOrganisationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileGetValidateBeforeCall(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileGetCall(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to retrieve details for a given user
     * Sample request:                    GET /user-profile?user-id&#x3D;user@mail.com,is-delegated&#x3D;true,is-delegated-search&#x3D;true,delegated-organisation-id&#x3D;123
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @return UserProfileResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfileResponseInfo userProfileGet(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId) throws ApiException {
        ApiResponse<UserProfileResponseInfo> resp = userProfileGetWithHttpInfo(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId);
        return resp.getData();
    }

    /**
     * Allows a user to retrieve details for a given user
     * Sample request:                    GET /user-profile?user-id&#x3D;user@mail.com,is-delegated&#x3D;true,is-delegated-search&#x3D;true,delegated-organisation-id&#x3D;123
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @return ApiResponse&lt;UserProfileResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfileResponseInfo> userProfileGetWithHttpInfo(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileGetValidateBeforeCall(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId, null, null);
        Type localVarReturnType = new TypeToken<UserProfileResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to retrieve details for a given user (asynchronously)
     * Sample request:                    GET /user-profile?user-id&#x3D;user@mail.com,is-delegated&#x3D;true,is-delegated-search&#x3D;true,delegated-organisation-id&#x3D;123
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileGetAsync(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId, final ApiCallback<UserProfileResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileGetValidateBeforeCall(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfileResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileIdpsCountGet
     * @param organisationId  (optional)
     * @param idps  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileIdpsCountGetCall(String organisationId, String idps, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/idps/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (organisationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organisation-id", organisationId));
        if (idps != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idps", idps));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileIdpsCountGetValidateBeforeCall(String organisationId, String idps, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileIdpsCountGetCall(organisationId, idps, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get number of affected users by IDP removal
     * Sample requests:        GET /user-profile/idps/count?organisation-id&#x3D;1,idps&#x3D;1
     * @param organisationId  (optional)
     * @param idps  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer userProfileIdpsCountGet(String organisationId, String idps) throws ApiException {
        ApiResponse<Integer> resp = userProfileIdpsCountGetWithHttpInfo(organisationId, idps);
        return resp.getData();
    }

    /**
     * Get number of affected users by IDP removal
     * Sample requests:        GET /user-profile/idps/count?organisation-id&#x3D;1,idps&#x3D;1
     * @param organisationId  (optional)
     * @param idps  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> userProfileIdpsCountGetWithHttpInfo(String organisationId, String idps) throws ApiException {
        com.squareup.okhttp.Call call = userProfileIdpsCountGetValidateBeforeCall(organisationId, idps, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get number of affected users by IDP removal (asynchronously)
     * Sample requests:        GET /user-profile/idps/count?organisation-id&#x3D;1,idps&#x3D;1
     * @param organisationId  (optional)
     * @param idps  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileIdpsCountGetAsync(String organisationId, String idps, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileIdpsCountGetValidateBeforeCall(organisationId, idps, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileInActiveGet
     * @param createdOn  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileInActiveGetCall(String createdOn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/in-active";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (createdOn != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("created-on", createdOn));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileInActiveGetValidateBeforeCall(String createdOn, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileInActiveGetCall(createdOn, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a list of unverified users to delete.
     * Sample request:        GET user-profile/in-active?created-on&#x3D;2022-07-19
     * @param createdOn  (optional)
     * @return List&lt;UserToDeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserToDeleteResponse> userProfileInActiveGet(String createdOn) throws ApiException {
        ApiResponse<List<UserToDeleteResponse>> resp = userProfileInActiveGetWithHttpInfo(createdOn);
        return resp.getData();
    }

    /**
     * Get a list of unverified users to delete.
     * Sample request:        GET user-profile/in-active?created-on&#x3D;2022-07-19
     * @param createdOn  (optional)
     * @return ApiResponse&lt;List&lt;UserToDeleteResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserToDeleteResponse>> userProfileInActiveGetWithHttpInfo(String createdOn) throws ApiException {
        com.squareup.okhttp.Call call = userProfileInActiveGetValidateBeforeCall(createdOn, null, null);
        Type localVarReturnType = new TypeToken<List<UserToDeleteResponse>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a list of unverified users to delete. (asynchronously)
     * Sample request:        GET user-profile/in-active?created-on&#x3D;2022-07-19
     * @param createdOn  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileInActiveGetAsync(String createdOn, final ApiCallback<List<UserToDeleteResponse>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileInActiveGetValidateBeforeCall(createdOn, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserToDeleteResponse>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileJoinRequestValidationGet
     * @param details  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileJoinRequestValidationGetCall(String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/join-request-validation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (details != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("details", details));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileJoinRequestValidationGetValidateBeforeCall(String details, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileJoinRequestValidationGetCall(details, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Verify user details for joining org request
     * Sample request:                    GET /user-profile/join-request-validation?details&#x3D;encrypted-token
     * @param details  (optional)
     * @return OrganisationJoinRequest
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrganisationJoinRequest userProfileJoinRequestValidationGet(String details) throws ApiException {
        ApiResponse<OrganisationJoinRequest> resp = userProfileJoinRequestValidationGetWithHttpInfo(details);
        return resp.getData();
    }

    /**
     * Verify user details for joining org request
     * Sample request:                    GET /user-profile/join-request-validation?details&#x3D;encrypted-token
     * @param details  (optional)
     * @return ApiResponse&lt;OrganisationJoinRequest&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrganisationJoinRequest> userProfileJoinRequestValidationGetWithHttpInfo(String details) throws ApiException {
        com.squareup.okhttp.Call call = userProfileJoinRequestValidationGetValidateBeforeCall(details, null, null);
        Type localVarReturnType = new TypeToken<OrganisationJoinRequest>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify user details for joining org request (asynchronously)
     * Sample request:                    GET /user-profile/join-request-validation?details&#x3D;encrypted-token
     * @param details  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileJoinRequestValidationGetAsync(String details, final ApiCallback<OrganisationJoinRequest> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileJoinRequestValidationGetValidateBeforeCall(details, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrganisationJoinRequest>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileNotificationAdminJoinNotificationPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileNotificationAdminJoinNotificationPostCall(OrganisationJoinRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/notification/admin-join-notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileNotificationAdminJoinNotificationPostValidateBeforeCall(OrganisationJoinRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileNotificationAdminJoinNotificationPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Notify all the organisation admins for join request
     * Sample request:                    POST /user-profile/notification/admin-join-notification      {       \&quot;firstName\&quot;: \&quot;firstname\&quot;,       \&quot;lastName\&quot;: \&quot;lastname\&quot;,       \&quot;email\&quot;: \&quot;useremail@yopmail.com\&quot;,       \&quot;ciiOrgId\&quot;: \&quot;12345678\&quot;,       \&quot;errorCode\&quot;: \&quot;404\&quot;      }
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfileNotificationAdminJoinNotificationPost(OrganisationJoinRequest body) throws ApiException {
        userProfileNotificationAdminJoinNotificationPostWithHttpInfo(body);
    }

    /**
     * Notify all the organisation admins for join request
     * Sample request:                    POST /user-profile/notification/admin-join-notification      {       \&quot;firstName\&quot;: \&quot;firstname\&quot;,       \&quot;lastName\&quot;: \&quot;lastname\&quot;,       \&quot;email\&quot;: \&quot;useremail@yopmail.com\&quot;,       \&quot;ciiOrgId\&quot;: \&quot;12345678\&quot;,       \&quot;errorCode\&quot;: \&quot;404\&quot;      }
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfileNotificationAdminJoinNotificationPostWithHttpInfo(OrganisationJoinRequest body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileNotificationAdminJoinNotificationPostValidateBeforeCall(body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Notify all the organisation admins for join request (asynchronously)
     * Sample request:                    POST /user-profile/notification/admin-join-notification      {       \&quot;firstName\&quot;: \&quot;firstname\&quot;,       \&quot;lastName\&quot;: \&quot;lastname\&quot;,       \&quot;email\&quot;: \&quot;useremail@yopmail.com\&quot;,       \&quot;ciiOrgId\&quot;: \&quot;12345678\&quot;,       \&quot;errorCode\&quot;: \&quot;404\&quot;      }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileNotificationAdminJoinNotificationPostAsync(OrganisationJoinRequest body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileNotificationAdminJoinNotificationPostValidateBeforeCall(body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfileOrganisationOrganisationIdGet
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param delegatedExpiredOnly  (optional)
     * @param includeUnverifiedAdmin  (optional)
     * @param includeSelf  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileOrganisationOrganisationIdGetCall(String organisationId, String searchString, Boolean delegatedExpiredOnly, Boolean includeUnverifiedAdmin, Boolean includeSelf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/organisation/{organisationId}"
            .replaceAll("\\{" + "organisationId" + "\\}", apiClient.escapeString(organisationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchString != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("search-string", searchString));
        if (delegatedExpiredOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delegated-expired-only", delegatedExpiredOnly));
        if (includeUnverifiedAdmin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include-unverified-admin", includeUnverifiedAdmin));
        if (includeSelf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("include-self", includeSelf));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileOrganisationOrganisationIdGetValidateBeforeCall(String organisationId, String searchString, Boolean delegatedExpiredOnly, Boolean includeUnverifiedAdmin, Boolean includeSelf, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'organisationId' is set
        if (organisationId == null) {
            throw new ApiException("Missing the required parameter 'organisationId' when calling userProfileOrganisationOrganisationIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = userProfileOrganisationOrganisationIdGetCall(organisationId, searchString, delegatedExpiredOnly, includeUnverifiedAdmin, includeSelf, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of users for the given organisation
     * Sample request:                    GET /user-profile/organisation/1
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param delegatedExpiredOnly  (optional)
     * @param includeUnverifiedAdmin  (optional)
     * @param includeSelf  (optional)
     * @return List&lt;UserListForOrganisationInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserListForOrganisationInfo> userProfileOrganisationOrganisationIdGet(String organisationId, String searchString, Boolean delegatedExpiredOnly, Boolean includeUnverifiedAdmin, Boolean includeSelf) throws ApiException {
        ApiResponse<List<UserListForOrganisationInfo>> resp = userProfileOrganisationOrganisationIdGetWithHttpInfo(organisationId, searchString, delegatedExpiredOnly, includeUnverifiedAdmin, includeSelf);
        return resp.getData();
    }

    /**
     * Get the list of users for the given organisation
     * Sample request:                    GET /user-profile/organisation/1
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param delegatedExpiredOnly  (optional)
     * @param includeUnverifiedAdmin  (optional)
     * @param includeSelf  (optional)
     * @return ApiResponse&lt;List&lt;UserListForOrganisationInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserListForOrganisationInfo>> userProfileOrganisationOrganisationIdGetWithHttpInfo(String organisationId, String searchString, Boolean delegatedExpiredOnly, Boolean includeUnverifiedAdmin, Boolean includeSelf) throws ApiException {
        com.squareup.okhttp.Call call = userProfileOrganisationOrganisationIdGetValidateBeforeCall(organisationId, searchString, delegatedExpiredOnly, includeUnverifiedAdmin, includeSelf, null, null);
        Type localVarReturnType = new TypeToken<List<UserListForOrganisationInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of users for the given organisation (asynchronously)
     * Sample request:                    GET /user-profile/organisation/1
     * @param organisationId  (required)
     * @param searchString  (optional)
     * @param delegatedExpiredOnly  (optional)
     * @param includeUnverifiedAdmin  (optional)
     * @param includeSelf  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileOrganisationOrganisationIdGetAsync(String organisationId, String searchString, Boolean delegatedExpiredOnly, Boolean includeUnverifiedAdmin, Boolean includeSelf, final ApiCallback<List<UserListForOrganisationInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileOrganisationOrganisationIdGetValidateBeforeCall(organisationId, searchString, delegatedExpiredOnly, includeUnverifiedAdmin, includeSelf, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserListForOrganisationInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfilePasswordsPut
     * @param userId  (optional)
     * @param component  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfilePasswordsPutCall(String userId, String component, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));
        if (component != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("component", component));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfilePasswordsPutValidateBeforeCall(String userId, String component, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfilePasswordsPutCall(userId, component, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset user password
     * Sample request:                    PUT /user-profile/passwords?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param component  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfilePasswordsPut(String userId, String component) throws ApiException {
        userProfilePasswordsPutWithHttpInfo(userId, component);
    }

    /**
     * Reset user password
     * Sample request:                    PUT /user-profile/passwords?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param component  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfilePasswordsPutWithHttpInfo(String userId, String component) throws ApiException {
        com.squareup.okhttp.Call call = userProfilePasswordsPutValidateBeforeCall(userId, component, null, null);
        return apiClient.execute(call);
    }

    /**
     * Reset user password (asynchronously)
     * Sample request:                    PUT /user-profile/passwords?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param component  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfilePasswordsPutAsync(String userId, String component, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfilePasswordsPutValidateBeforeCall(userId, component, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfilePermissionsGet
     * @param userName  (optional)
     * @param serviceClientId  (optional)
     * @param organisationId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfilePermissionsGetCall(String userName, String serviceClientId, String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-name", userName));
        if (serviceClientId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("service-client-id", serviceClientId));
        if (organisationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("organisation-id", organisationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfilePermissionsGetValidateBeforeCall(String userName, String serviceClientId, String organisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfilePermissionsGetCall(userName, serviceClientId, organisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get user permissions
     * Sample requests:                    GET /user-profile/permissions?user-name&#x3D;test
     * @param userName  (optional)
     * @param serviceClientId  (optional)
     * @param organisationId  (optional)
     * @return ServicePermissionDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ServicePermissionDto userProfilePermissionsGet(String userName, String serviceClientId, String organisationId) throws ApiException {
        ApiResponse<ServicePermissionDto> resp = userProfilePermissionsGetWithHttpInfo(userName, serviceClientId, organisationId);
        return resp.getData();
    }

    /**
     * Get user permissions
     * Sample requests:                    GET /user-profile/permissions?user-name&#x3D;test
     * @param userName  (optional)
     * @param serviceClientId  (optional)
     * @param organisationId  (optional)
     * @return ApiResponse&lt;ServicePermissionDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ServicePermissionDto> userProfilePermissionsGetWithHttpInfo(String userName, String serviceClientId, String organisationId) throws ApiException {
        com.squareup.okhttp.Call call = userProfilePermissionsGetValidateBeforeCall(userName, serviceClientId, organisationId, null, null);
        Type localVarReturnType = new TypeToken<ServicePermissionDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get user permissions (asynchronously)
     * Sample requests:                    GET /user-profile/permissions?user-name&#x3D;test
     * @param userName  (optional)
     * @param serviceClientId  (optional)
     * @param organisationId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfilePermissionsGetAsync(String userName, String serviceClientId, String organisationId, final ApiCallback<ServicePermissionDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfilePermissionsGetValidateBeforeCall(userName, serviceClientId, organisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ServicePermissionDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfilePost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfilePostCall(UserProfileEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfilePostValidateBeforeCall(UserProfileEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfilePostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create user details
     * Sample request:                    POST /user-profile      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [ 1, 2 ],            \&quot;roleIds\&quot;: [ 1, 2 ],            \&quot;identityProviderIds\&quot;: [1]         }      }
     * @param body  (optional)
     * @return UserEditResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEditResponseInfo userProfilePost(UserProfileEditRequestInfo body) throws ApiException {
        ApiResponse<UserEditResponseInfo> resp = userProfilePostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Allows a user to create user details
     * Sample request:                    POST /user-profile      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [ 1, 2 ],            \&quot;roleIds\&quot;: [ 1, 2 ],            \&quot;identityProviderIds\&quot;: [1]         }      }
     * @param body  (optional)
     * @return ApiResponse&lt;UserEditResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEditResponseInfo> userProfilePostWithHttpInfo(UserProfileEditRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = userProfilePostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create user details (asynchronously)
     * Sample request:                    POST /user-profile      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [ 1, 2 ],            \&quot;roleIds\&quot;: [ 1, 2 ],            \&quot;identityProviderIds\&quot;: [1]         }      }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfilePostAsync(UserProfileEditRequestInfo body, final ApiCallback<UserEditResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfilePostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfilePut
     * @param body  (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfilePutCall(UserProfileEditRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfilePutValidateBeforeCall(UserProfileEditRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfilePutCall(body, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to update user details
     * Sample request:                    PUT /user-profile?user-id&#x3D;user@mail.com      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [ 1, 2 ],            \&quot;roleIds\&quot;: [ 1, 2 ],            \&quot;identityProviderIds\&quot;: [1]         }      }
     * @param body  (optional)
     * @param userId  (optional)
     * @return UserEditResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEditResponseInfo userProfilePut(UserProfileEditRequestInfo body, String userId) throws ApiException {
        ApiResponse<UserEditResponseInfo> resp = userProfilePutWithHttpInfo(body, userId);
        return resp.getData();
    }

    /**
     * Allows a user to update user details
     * Sample request:                    PUT /user-profile?user-id&#x3D;user@mail.com      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [ 1, 2 ],            \&quot;roleIds\&quot;: [ 1, 2 ],            \&quot;identityProviderIds\&quot;: [1]         }      }
     * @param body  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;UserEditResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEditResponseInfo> userProfilePutWithHttpInfo(UserProfileEditRequestInfo body, String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfilePutValidateBeforeCall(body, userId, null, null);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to update user details (asynchronously)
     * Sample request:                    PUT /user-profile?user-id&#x3D;user@mail.com      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [ 1, 2 ],            \&quot;roleIds\&quot;: [ 1, 2 ],            \&quot;identityProviderIds\&quot;: [1]         }      }
     * @param body  (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfilePutAsync(UserProfileEditRequestInfo body, String userId, final ApiCallback<UserEditResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfilePutValidateBeforeCall(body, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileUserDetailsUserIdsGet
     * @param userIds  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileUserDetailsUserIdsGetCall(String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/user-details/{userIds}"
            .replaceAll("\\{" + "userIds" + "\\}", apiClient.escapeString(userIds.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileUserDetailsUserIdsGetValidateBeforeCall(String userIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling userProfileUserDetailsUserIdsGet(Async)");
        }
        
        com.squareup.okhttp.Call call = userProfileUserDetailsUserIdsGetCall(userIds, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get list of user names from the given user ids
     * Sample request:                    GET /user-profile/user-details/userone@mail.com,usertwo@mail.com
     * @param userIds  (required)
     * @return UserNameListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserNameListResponse userProfileUserDetailsUserIdsGet(String userIds) throws ApiException {
        ApiResponse<UserNameListResponse> resp = userProfileUserDetailsUserIdsGetWithHttpInfo(userIds);
        return resp.getData();
    }

    /**
     * Get list of user names from the given user ids
     * Sample request:                    GET /user-profile/user-details/userone@mail.com,usertwo@mail.com
     * @param userIds  (required)
     * @return ApiResponse&lt;UserNameListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserNameListResponse> userProfileUserDetailsUserIdsGetWithHttpInfo(String userIds) throws ApiException {
        com.squareup.okhttp.Call call = userProfileUserDetailsUserIdsGetValidateBeforeCall(userIds, null, null);
        Type localVarReturnType = new TypeToken<UserNameListResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get list of user names from the given user ids (asynchronously)
     * Sample request:                    GET /user-profile/user-details/userone@mail.com,usertwo@mail.com
     * @param userIds  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileUserDetailsUserIdsGetAsync(String userIds, final ApiCallback<UserNameListResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileUserDetailsUserIdsGetValidateBeforeCall(userIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserNameListResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileUserExistGet
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileUserExistGetCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/user-exist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileUserExistGetValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileUserExistGetCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Check if user exists
     * Sample request:                    Get /user-profile/user-exist?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Boolean userProfileUserExistGet(String userId) throws ApiException {
        ApiResponse<Boolean> resp = userProfileUserExistGetWithHttpInfo(userId);
        return resp.getData();
    }

    /**
     * Check if user exists
     * Sample request:                    Get /user-profile/user-exist?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Boolean> userProfileUserExistGetWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileUserExistGetValidateBeforeCall(userId, null, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Check if user exists (asynchronously)
     * Sample request:                    Get /user-profile/user-exist?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileUserExistGetAsync(String userId, final ApiCallback<Boolean> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileUserExistGetValidateBeforeCall(userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileV1Delete
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileV1DeleteCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileV1DeleteValidateBeforeCall(String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileV1DeleteCall(userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a user
     * Sample request:                    DELETE /user-profile/v1?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void userProfileV1Delete(String userId) throws ApiException {
        userProfileV1DeleteWithHttpInfo(userId);
    }

    /**
     * Delete a user
     * Sample request:                    DELETE /user-profile/v1?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> userProfileV1DeleteWithHttpInfo(String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileV1DeleteValidateBeforeCall(userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a user (asynchronously)
     * Sample request:                    DELETE /user-profile/v1?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileV1DeleteAsync(String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileV1DeleteValidateBeforeCall(userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for userProfileV1Get
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileV1GetCall(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/user-profile/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));
        if (isDelegated != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-delegated", isDelegated));
        if (isDelegatedSearch != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("is-delegated-search", isDelegatedSearch));
        if (delegatedOrganisationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("delegated-organisation-id", delegatedOrganisationId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileV1GetValidateBeforeCall(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileV1GetCall(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to retrieve details for a given user  #Delegated
     * Sample request:                    GET /user-profile/v1?user-id&#x3D;user@mail.com,is-delegated&#x3D;true,is-delegated-search&#x3D;true,delegated-organisation-id&#x3D;123
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @return UserProfileServiceRoleGroupResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserProfileServiceRoleGroupResponseInfo userProfileV1Get(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId) throws ApiException {
        ApiResponse<UserProfileServiceRoleGroupResponseInfo> resp = userProfileV1GetWithHttpInfo(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId);
        return resp.getData();
    }

    /**
     * Allows a user to retrieve details for a given user  #Delegated
     * Sample request:                    GET /user-profile/v1?user-id&#x3D;user@mail.com,is-delegated&#x3D;true,is-delegated-search&#x3D;true,delegated-organisation-id&#x3D;123
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @return ApiResponse&lt;UserProfileServiceRoleGroupResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserProfileServiceRoleGroupResponseInfo> userProfileV1GetWithHttpInfo(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileV1GetValidateBeforeCall(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId, null, null);
        Type localVarReturnType = new TypeToken<UserProfileServiceRoleGroupResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to retrieve details for a given user  #Delegated (asynchronously)
     * Sample request:                    GET /user-profile/v1?user-id&#x3D;user@mail.com,is-delegated&#x3D;true,is-delegated-search&#x3D;true,delegated-organisation-id&#x3D;123
     * @param userId  (optional)
     * @param isDelegated  (optional, default to false)
     * @param isDelegatedSearch  (optional, default to false)
     * @param delegatedOrganisationId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileV1GetAsync(String userId, Boolean isDelegated, Boolean isDelegatedSearch, String delegatedOrganisationId, final ApiCallback<UserProfileServiceRoleGroupResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileV1GetValidateBeforeCall(userId, isDelegated, isDelegatedSearch, delegatedOrganisationId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserProfileServiceRoleGroupResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileV1Post
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileV1PostCall(UserProfileServiceRoleGroupEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileV1PostValidateBeforeCall(UserProfileServiceRoleGroupEditRequestInfo body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileV1PostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create user details
     * Sample request:                    POST /user-profile/v1      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [1, 2],            \&quot;serviceRoleGroupIds\&quot;: [1, 2],            \&quot;identityProviderIds\&quot;: [1],         }      }
     * @param body  (optional)
     * @return UserEditResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEditResponseInfo userProfileV1Post(UserProfileServiceRoleGroupEditRequestInfo body) throws ApiException {
        ApiResponse<UserEditResponseInfo> resp = userProfileV1PostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Allows a user to create user details
     * Sample request:                    POST /user-profile/v1      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [1, 2],            \&quot;serviceRoleGroupIds\&quot;: [1, 2],            \&quot;identityProviderIds\&quot;: [1],         }      }
     * @param body  (optional)
     * @return ApiResponse&lt;UserEditResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEditResponseInfo> userProfileV1PostWithHttpInfo(UserProfileServiceRoleGroupEditRequestInfo body) throws ApiException {
        com.squareup.okhttp.Call call = userProfileV1PostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create user details (asynchronously)
     * Sample request:                    POST /user-profile/v1      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;password\&quot;:\&quot;\&quot;,// Not mandatory         \&quot;SendUserRegistrationEmail\&quot;:false,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 0,            \&quot;groupIds\&quot;: [1, 2],            \&quot;serviceRoleGroupIds\&quot;: [1, 2],            \&quot;identityProviderIds\&quot;: [1],         }      }
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileV1PostAsync(UserProfileServiceRoleGroupEditRequestInfo body, final ApiCallback<UserEditResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileV1PostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for userProfileV1Put
     * @param body  (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call userProfileV1PutCall(UserProfileServiceRoleGroupEditRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/user-profile/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call userProfileV1PutValidateBeforeCall(UserProfileServiceRoleGroupEditRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = userProfileV1PutCall(body, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to update user details
     * Sample request:                    PUT /user-profile/v1?user-id&#x3D;user@mail.com      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 1,            \&quot;groupIds\&quot;: [1, 2],            \&quot;serviceRoleGroupIds\&quot;: [1, 2],            \&quot;identityProviderIds\&quot;: [1],         }      }
     * @param body  (optional)
     * @param userId  (optional)
     * @return UserEditResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserEditResponseInfo userProfileV1Put(UserProfileServiceRoleGroupEditRequestInfo body, String userId) throws ApiException {
        ApiResponse<UserEditResponseInfo> resp = userProfileV1PutWithHttpInfo(body, userId);
        return resp.getData();
    }

    /**
     * Allows a user to update user details
     * Sample request:                    PUT /user-profile/v1?user-id&#x3D;user@mail.com      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 1,            \&quot;groupIds\&quot;: [1, 2],            \&quot;serviceRoleGroupIds\&quot;: [1, 2],            \&quot;identityProviderIds\&quot;: [1],         }      }
     * @param body  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;UserEditResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserEditResponseInfo> userProfileV1PutWithHttpInfo(UserProfileServiceRoleGroupEditRequestInfo body, String userId) throws ApiException {
        com.squareup.okhttp.Call call = userProfileV1PutValidateBeforeCall(body, userId, null, null);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to update user details (asynchronously)
     * Sample request:                    PUT /user-profile/v1?user-id&#x3D;user@mail.com      {         \&quot;firstName\&quot;: \&quot;FirstName\&quot;,         \&quot;lastName\&quot;: \&quot;LastName\&quot;,         \&quot;organisationId\&quot;: \&quot;CcsOrgId1\&quot;,         \&quot;userName\&quot;: \&quot;user@mail.com\&quot;,         \&quot;detail\&quot;: {            \&quot;id\&quot;: 1,            \&quot;groupIds\&quot;: [1, 2],            \&quot;serviceRoleGroupIds\&quot;: [1, 2],            \&quot;identityProviderIds\&quot;: [1],         }      }
     * @param body  (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call userProfileV1PutAsync(UserProfileServiceRoleGroupEditRequestInfo body, String userId, final ApiCallback<UserEditResponseInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = userProfileV1PutValidateBeforeCall(body, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserEditResponseInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
