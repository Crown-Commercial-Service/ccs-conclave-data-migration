/*
 * CcsSso.OrganisationApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import uk.gov.ccs.swagger.sso.model.AggregateException;
import uk.gov.ccs.swagger.sso.model.TaskCreationOptions;
import uk.gov.ccs.swagger.sso.model.TaskStatus;
/**
 * StringListTask
 */


public class StringListTask {
  @SerializedName("id")
  private Integer id = null;

  @SerializedName("exception")
  private AggregateException exception = null;

  @SerializedName("status")
  private TaskStatus status = null;

  @SerializedName("isCanceled")
  private Boolean isCanceled = null;

  @SerializedName("isCompleted")
  private Boolean isCompleted = null;

  @SerializedName("isCompletedSuccessfully")
  private Boolean isCompletedSuccessfully = null;

  @SerializedName("creationOptions")
  private TaskCreationOptions creationOptions = null;

  @SerializedName("asyncState")
  private Object asyncState = null;

  @SerializedName("isFaulted")
  private Boolean isFaulted = null;

  @SerializedName("result")
  private List<String> result = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }

  public StringListTask exception(AggregateException exception) {
    this.exception = exception;
    return this;
  }

   /**
   * Get exception
   * @return exception
  **/
  @Schema(description = "")
  public AggregateException getException() {
    return exception;
  }

  public void setException(AggregateException exception) {
    this.exception = exception;
  }

  public StringListTask status(TaskStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @Schema(description = "")
  public TaskStatus getStatus() {
    return status;
  }

  public void setStatus(TaskStatus status) {
    this.status = status;
  }

   /**
   * Get isCanceled
   * @return isCanceled
  **/
  @Schema(description = "")
  public Boolean isIsCanceled() {
    return isCanceled;
  }

   /**
   * Get isCompleted
   * @return isCompleted
  **/
  @Schema(description = "")
  public Boolean isIsCompleted() {
    return isCompleted;
  }

   /**
   * Get isCompletedSuccessfully
   * @return isCompletedSuccessfully
  **/
  @Schema(description = "")
  public Boolean isIsCompletedSuccessfully() {
    return isCompletedSuccessfully;
  }

  public StringListTask creationOptions(TaskCreationOptions creationOptions) {
    this.creationOptions = creationOptions;
    return this;
  }

   /**
   * Get creationOptions
   * @return creationOptions
  **/
  @Schema(description = "")
  public TaskCreationOptions getCreationOptions() {
    return creationOptions;
  }

  public void setCreationOptions(TaskCreationOptions creationOptions) {
    this.creationOptions = creationOptions;
  }

   /**
   * Get asyncState
   * @return asyncState
  **/
  @Schema(description = "")
  public Object getAsyncState() {
    return asyncState;
  }

   /**
   * Get isFaulted
   * @return isFaulted
  **/
  @Schema(description = "")
  public Boolean isIsFaulted() {
    return isFaulted;
  }

   /**
   * Get result
   * @return result
  **/
  @Schema(description = "")
  public List<String> getResult() {
    return result;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StringListTask stringListTask = (StringListTask) o;
    return Objects.equals(this.id, stringListTask.id) &&
        Objects.equals(this.exception, stringListTask.exception) &&
        Objects.equals(this.status, stringListTask.status) &&
        Objects.equals(this.isCanceled, stringListTask.isCanceled) &&
        Objects.equals(this.isCompleted, stringListTask.isCompleted) &&
        Objects.equals(this.isCompletedSuccessfully, stringListTask.isCompletedSuccessfully) &&
        Objects.equals(this.creationOptions, stringListTask.creationOptions) &&
        Objects.equals(this.asyncState, stringListTask.asyncState) &&
        Objects.equals(this.isFaulted, stringListTask.isFaulted) &&
        Objects.equals(this.result, stringListTask.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, exception, status, isCanceled, isCompleted, isCompletedSuccessfully, creationOptions, asyncState, isFaulted, result);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StringListTask {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    isCanceled: ").append(toIndentedString(isCanceled)).append("\n");
    sb.append("    isCompleted: ").append(toIndentedString(isCompleted)).append("\n");
    sb.append("    isCompletedSuccessfully: ").append(toIndentedString(isCompletedSuccessfully)).append("\n");
    sb.append("    creationOptions: ").append(toIndentedString(creationOptions)).append("\n");
    sb.append("    asyncState: ").append(toIndentedString(asyncState)).append("\n");
    sb.append("    isFaulted: ").append(toIndentedString(isFaulted)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
