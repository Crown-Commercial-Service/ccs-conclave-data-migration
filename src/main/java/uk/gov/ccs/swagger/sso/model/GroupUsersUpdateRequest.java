/*
 * CcsSso.UserApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import uk.gov.ccs.swagger.sso.model.OrganisationGroupRequestInfo;
/**
 * GroupUsersUpdateRequest
 */


public class GroupUsersUpdateRequest {
  @SerializedName("groupId")
  private Integer groupId = null;

  @SerializedName("organisationGroupRequestInfo")
  private OrganisationGroupRequestInfo organisationGroupRequestInfo = null;

  @SerializedName("requestUserId")
  private String requestUserId = null;

  @SerializedName("organisationId")
  private String organisationId = null;

  @SerializedName("anyRoleRequiredApproval")
  private Boolean anyRoleRequiredApproval = null;

  @SerializedName("mfaEnableRoleExists")
  private Boolean mfaEnableRoleExists = null;

  @SerializedName("isRoleApprovalEnable")
  private Boolean isRoleApprovalEnable = null;

  @SerializedName("groupType")
  private Integer groupType = null;

  @SerializedName("orgAdminRoleId")
  private Integer orgAdminRoleId = null;

  @SerializedName("groupEligibleRoles")
  private List<Integer> groupEligibleRoles = null;

  @SerializedName("ciiOrganisationId")
  private String ciiOrganisationId = null;

  @SerializedName("domainName")
  private String domainName = null;

  public GroupUsersUpdateRequest groupId(Integer groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * Get groupId
   * @return groupId
  **/
  @Schema(description = "")
  public Integer getGroupId() {
    return groupId;
  }

  public void setGroupId(Integer groupId) {
    this.groupId = groupId;
  }

  public GroupUsersUpdateRequest organisationGroupRequestInfo(OrganisationGroupRequestInfo organisationGroupRequestInfo) {
    this.organisationGroupRequestInfo = organisationGroupRequestInfo;
    return this;
  }

   /**
   * Get organisationGroupRequestInfo
   * @return organisationGroupRequestInfo
  **/
  @Schema(description = "")
  public OrganisationGroupRequestInfo getOrganisationGroupRequestInfo() {
    return organisationGroupRequestInfo;
  }

  public void setOrganisationGroupRequestInfo(OrganisationGroupRequestInfo organisationGroupRequestInfo) {
    this.organisationGroupRequestInfo = organisationGroupRequestInfo;
  }

  public GroupUsersUpdateRequest requestUserId(String requestUserId) {
    this.requestUserId = requestUserId;
    return this;
  }

   /**
   * Get requestUserId
   * @return requestUserId
  **/
  @Schema(description = "")
  public String getRequestUserId() {
    return requestUserId;
  }

  public void setRequestUserId(String requestUserId) {
    this.requestUserId = requestUserId;
  }

  public GroupUsersUpdateRequest organisationId(String organisationId) {
    this.organisationId = organisationId;
    return this;
  }

   /**
   * Get organisationId
   * @return organisationId
  **/
  @Schema(description = "")
  public String getOrganisationId() {
    return organisationId;
  }

  public void setOrganisationId(String organisationId) {
    this.organisationId = organisationId;
  }

  public GroupUsersUpdateRequest anyRoleRequiredApproval(Boolean anyRoleRequiredApproval) {
    this.anyRoleRequiredApproval = anyRoleRequiredApproval;
    return this;
  }

   /**
   * Get anyRoleRequiredApproval
   * @return anyRoleRequiredApproval
  **/
  @Schema(description = "")
  public Boolean isAnyRoleRequiredApproval() {
    return anyRoleRequiredApproval;
  }

  public void setAnyRoleRequiredApproval(Boolean anyRoleRequiredApproval) {
    this.anyRoleRequiredApproval = anyRoleRequiredApproval;
  }

  public GroupUsersUpdateRequest mfaEnableRoleExists(Boolean mfaEnableRoleExists) {
    this.mfaEnableRoleExists = mfaEnableRoleExists;
    return this;
  }

   /**
   * Get mfaEnableRoleExists
   * @return mfaEnableRoleExists
  **/
  @Schema(description = "")
  public Boolean isMfaEnableRoleExists() {
    return mfaEnableRoleExists;
  }

  public void setMfaEnableRoleExists(Boolean mfaEnableRoleExists) {
    this.mfaEnableRoleExists = mfaEnableRoleExists;
  }

  public GroupUsersUpdateRequest isRoleApprovalEnable(Boolean isRoleApprovalEnable) {
    this.isRoleApprovalEnable = isRoleApprovalEnable;
    return this;
  }

   /**
   * Get isRoleApprovalEnable
   * @return isRoleApprovalEnable
  **/
  @Schema(description = "")
  public Boolean isIsRoleApprovalEnable() {
    return isRoleApprovalEnable;
  }

  public void setIsRoleApprovalEnable(Boolean isRoleApprovalEnable) {
    this.isRoleApprovalEnable = isRoleApprovalEnable;
  }

  public GroupUsersUpdateRequest groupType(Integer groupType) {
    this.groupType = groupType;
    return this;
  }

   /**
   * Get groupType
   * @return groupType
  **/
  @Schema(description = "")
  public Integer getGroupType() {
    return groupType;
  }

  public void setGroupType(Integer groupType) {
    this.groupType = groupType;
  }

  public GroupUsersUpdateRequest orgAdminRoleId(Integer orgAdminRoleId) {
    this.orgAdminRoleId = orgAdminRoleId;
    return this;
  }

   /**
   * Get orgAdminRoleId
   * @return orgAdminRoleId
  **/
  @Schema(description = "")
  public Integer getOrgAdminRoleId() {
    return orgAdminRoleId;
  }

  public void setOrgAdminRoleId(Integer orgAdminRoleId) {
    this.orgAdminRoleId = orgAdminRoleId;
  }

  public GroupUsersUpdateRequest groupEligibleRoles(List<Integer> groupEligibleRoles) {
    this.groupEligibleRoles = groupEligibleRoles;
    return this;
  }

  public GroupUsersUpdateRequest addGroupEligibleRolesItem(Integer groupEligibleRolesItem) {
    if (this.groupEligibleRoles == null) {
      this.groupEligibleRoles = new ArrayList<Integer>();
    }
    this.groupEligibleRoles.add(groupEligibleRolesItem);
    return this;
  }

   /**
   * Get groupEligibleRoles
   * @return groupEligibleRoles
  **/
  @Schema(description = "")
  public List<Integer> getGroupEligibleRoles() {
    return groupEligibleRoles;
  }

  public void setGroupEligibleRoles(List<Integer> groupEligibleRoles) {
    this.groupEligibleRoles = groupEligibleRoles;
  }

  public GroupUsersUpdateRequest ciiOrganisationId(String ciiOrganisationId) {
    this.ciiOrganisationId = ciiOrganisationId;
    return this;
  }

   /**
   * Get ciiOrganisationId
   * @return ciiOrganisationId
  **/
  @Schema(description = "")
  public String getCiiOrganisationId() {
    return ciiOrganisationId;
  }

  public void setCiiOrganisationId(String ciiOrganisationId) {
    this.ciiOrganisationId = ciiOrganisationId;
  }

  public GroupUsersUpdateRequest domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

   /**
   * Get domainName
   * @return domainName
  **/
  @Schema(description = "")
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupUsersUpdateRequest groupUsersUpdateRequest = (GroupUsersUpdateRequest) o;
    return Objects.equals(this.groupId, groupUsersUpdateRequest.groupId) &&
        Objects.equals(this.organisationGroupRequestInfo, groupUsersUpdateRequest.organisationGroupRequestInfo) &&
        Objects.equals(this.requestUserId, groupUsersUpdateRequest.requestUserId) &&
        Objects.equals(this.organisationId, groupUsersUpdateRequest.organisationId) &&
        Objects.equals(this.anyRoleRequiredApproval, groupUsersUpdateRequest.anyRoleRequiredApproval) &&
        Objects.equals(this.mfaEnableRoleExists, groupUsersUpdateRequest.mfaEnableRoleExists) &&
        Objects.equals(this.isRoleApprovalEnable, groupUsersUpdateRequest.isRoleApprovalEnable) &&
        Objects.equals(this.groupType, groupUsersUpdateRequest.groupType) &&
        Objects.equals(this.orgAdminRoleId, groupUsersUpdateRequest.orgAdminRoleId) &&
        Objects.equals(this.groupEligibleRoles, groupUsersUpdateRequest.groupEligibleRoles) &&
        Objects.equals(this.ciiOrganisationId, groupUsersUpdateRequest.ciiOrganisationId) &&
        Objects.equals(this.domainName, groupUsersUpdateRequest.domainName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupId, organisationGroupRequestInfo, requestUserId, organisationId, anyRoleRequiredApproval, mfaEnableRoleExists, isRoleApprovalEnable, groupType, orgAdminRoleId, groupEligibleRoles, ciiOrganisationId, domainName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupUsersUpdateRequest {\n");
    
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    organisationGroupRequestInfo: ").append(toIndentedString(organisationGroupRequestInfo)).append("\n");
    sb.append("    requestUserId: ").append(toIndentedString(requestUserId)).append("\n");
    sb.append("    organisationId: ").append(toIndentedString(organisationId)).append("\n");
    sb.append("    anyRoleRequiredApproval: ").append(toIndentedString(anyRoleRequiredApproval)).append("\n");
    sb.append("    mfaEnableRoleExists: ").append(toIndentedString(mfaEnableRoleExists)).append("\n");
    sb.append("    isRoleApprovalEnable: ").append(toIndentedString(isRoleApprovalEnable)).append("\n");
    sb.append("    groupType: ").append(toIndentedString(groupType)).append("\n");
    sb.append("    orgAdminRoleId: ").append(toIndentedString(orgAdminRoleId)).append("\n");
    sb.append("    groupEligibleRoles: ").append(toIndentedString(groupEligibleRoles)).append("\n");
    sb.append("    ciiOrganisationId: ").append(toIndentedString(ciiOrganisationId)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
