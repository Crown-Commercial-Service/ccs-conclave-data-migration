/*
 * CcsSso.WrapperApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.api;

import uk.gov.ccs.swagger.sso.ApiCallback;
import uk.gov.ccs.swagger.sso.ApiClient;
import uk.gov.ccs.swagger.sso.ApiException;
import uk.gov.ccs.swagger.sso.ApiResponse;
import uk.gov.ccs.swagger.sso.Configuration;
import uk.gov.ccs.swagger.sso.Pair;
import uk.gov.ccs.swagger.sso.ProgressRequestBody;
import uk.gov.ccs.swagger.sso.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import uk.gov.ccs.swagger.sso.model.ContactRequestInfo;
import uk.gov.ccs.swagger.sso.model.UserContactInfo;
import uk.gov.ccs.swagger.sso.model.UserContactInfoList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserContactApi {
    private ApiClient apiClient;

    public UserContactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserContactApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for usersContactsContactIdDelete
     * @param contactId  (required)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersContactsContactIdDeleteCall(Integer contactId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/contacts/{contactId}"
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersContactsContactIdDeleteValidateBeforeCall(Integer contactId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling usersContactsContactIdDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = usersContactsContactIdDeleteCall(contactId, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove a contact from user
     * Sample request:                    DELETE /users/contacts/1?user-id&#x3D;user@mail.com
     * @param contactId  (required)
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersContactsContactIdDelete(Integer contactId, String userId) throws ApiException {
        usersContactsContactIdDeleteWithHttpInfo(contactId, userId);
    }

    /**
     * Remove a contact from user
     * Sample request:                    DELETE /users/contacts/1?user-id&#x3D;user@mail.com
     * @param contactId  (required)
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersContactsContactIdDeleteWithHttpInfo(Integer contactId, String userId) throws ApiException {
        com.squareup.okhttp.Call call = usersContactsContactIdDeleteValidateBeforeCall(contactId, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Remove a contact from user (asynchronously)
     * Sample request:                    DELETE /users/contacts/1?user-id&#x3D;user@mail.com
     * @param contactId  (required)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersContactsContactIdDeleteAsync(Integer contactId, String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersContactsContactIdDeleteValidateBeforeCall(contactId, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersContactsContactIdGet
     * @param contactId  (required)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersContactsContactIdGetCall(Integer contactId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/contacts/{contactId}"
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersContactsContactIdGetValidateBeforeCall(Integer contactId, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling usersContactsContactIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = usersContactsContactIdGetCall(contactId, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to retrieve details for a given contact
     * Sample request:                    GET /users/contacts/1?user-id&#x3D;user@mail.com
     * @param contactId  (required)
     * @param userId  (optional)
     * @return UserContactInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserContactInfo usersContactsContactIdGet(Integer contactId, String userId) throws ApiException {
        ApiResponse<UserContactInfo> resp = usersContactsContactIdGetWithHttpInfo(contactId, userId);
        return resp.getData();
    }

    /**
     * Allows a user to retrieve details for a given contact
     * Sample request:                    GET /users/contacts/1?user-id&#x3D;user@mail.com
     * @param contactId  (required)
     * @param userId  (optional)
     * @return ApiResponse&lt;UserContactInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserContactInfo> usersContactsContactIdGetWithHttpInfo(Integer contactId, String userId) throws ApiException {
        com.squareup.okhttp.Call call = usersContactsContactIdGetValidateBeforeCall(contactId, userId, null, null);
        Type localVarReturnType = new TypeToken<UserContactInfo>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to retrieve details for a given contact (asynchronously)
     * Sample request:                    GET /users/contacts/1?user-id&#x3D;user@mail.com
     * @param contactId  (required)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersContactsContactIdGetAsync(Integer contactId, String userId, final ApiCallback<UserContactInfo> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersContactsContactIdGetValidateBeforeCall(contactId, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserContactInfo>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersContactsContactIdPut
     * @param contactId  (required)
     * @param body  (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersContactsContactIdPutCall(Integer contactId, ContactRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/contacts/{contactId}"
            .replaceAll("\\{" + "contactId" + "\\}", apiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersContactsContactIdPutValidateBeforeCall(Integer contactId, ContactRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling usersContactsContactIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = usersContactsContactIdPutCall(contactId, body, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to edit user contact details
     * Sample request:                    PUT /users/contacts/1?user-id&#x3D;user@mail.com      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param contactId  (required)
     * @param body  (optional)
     * @param userId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void usersContactsContactIdPut(Integer contactId, ContactRequestInfo body, String userId) throws ApiException {
        usersContactsContactIdPutWithHttpInfo(contactId, body, userId);
    }

    /**
     * Allows a user to edit user contact details
     * Sample request:                    PUT /users/contacts/1?user-id&#x3D;user@mail.com      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param contactId  (required)
     * @param body  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> usersContactsContactIdPutWithHttpInfo(Integer contactId, ContactRequestInfo body, String userId) throws ApiException {
        com.squareup.okhttp.Call call = usersContactsContactIdPutValidateBeforeCall(contactId, body, userId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Allows a user to edit user contact details (asynchronously)
     * Sample request:                    PUT /users/contacts/1?user-id&#x3D;user@mail.com      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param contactId  (required)
     * @param body  (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersContactsContactIdPutAsync(Integer contactId, ContactRequestInfo body, String userId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersContactsContactIdPutValidateBeforeCall(contactId, body, userId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersContactsGet
     * @param userId  (optional)
     * @param contactType  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersContactsGetCall(String userId, String contactType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/users/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));
        if (contactType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("contactType", contactType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersContactsGetValidateBeforeCall(String userId, String contactType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = usersContactsGetCall(userId, contactType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to get user contact details
     * Sample request:                    GET /user-profile/users/contacts?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param contactType  (optional)
     * @return UserContactInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserContactInfoList usersContactsGet(String userId, String contactType) throws ApiException {
        ApiResponse<UserContactInfoList> resp = usersContactsGetWithHttpInfo(userId, contactType);
        return resp.getData();
    }

    /**
     * Allows a user to get user contact details
     * Sample request:                    GET /user-profile/users/contacts?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param contactType  (optional)
     * @return ApiResponse&lt;UserContactInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserContactInfoList> usersContactsGetWithHttpInfo(String userId, String contactType) throws ApiException {
        com.squareup.okhttp.Call call = usersContactsGetValidateBeforeCall(userId, contactType, null, null);
        Type localVarReturnType = new TypeToken<UserContactInfoList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to get user contact details (asynchronously)
     * Sample request:                    GET /user-profile/users/contacts?user-id&#x3D;user@mail.com
     * @param userId  (optional)
     * @param contactType  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersContactsGetAsync(String userId, String contactType, final ApiCallback<UserContactInfoList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersContactsGetValidateBeforeCall(userId, contactType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserContactInfoList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersContactsPost
     * @param body  (optional)
     * @param userId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersContactsPostCall(ContactRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/users/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (userId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("user-id", userId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "ApiKey" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersContactsPostValidateBeforeCall(ContactRequestInfo body, String userId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = usersContactsPostCall(body, userId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Allows a user to create user contact details
     * Sample request:                    POST /users/contacts?user-id&#x3D;user@mail.com      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param body  (optional)
     * @param userId  (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Integer usersContactsPost(ContactRequestInfo body, String userId) throws ApiException {
        ApiResponse<Integer> resp = usersContactsPostWithHttpInfo(body, userId);
        return resp.getData();
    }

    /**
     * Allows a user to create user contact details
     * Sample request:                    POST /users/contacts?user-id&#x3D;user@mail.com      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param body  (optional)
     * @param userId  (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Integer> usersContactsPostWithHttpInfo(ContactRequestInfo body, String userId) throws ApiException {
        com.squareup.okhttp.Call call = usersContactsPostValidateBeforeCall(body, userId, null, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Allows a user to create user contact details (asynchronously)
     * Sample request:                    POST /users/contacts?user-id&#x3D;user@mail.com      {         \&quot;contactPointReason\&quot;: \&quot;General\&quot;,         \&quot;contactPointName\&quot;: \&quot;Test User\&quot;,         \&quot;contacts\&quot;: [            {              contactType: \&quot;EMAIL\&quot;,              contactValue: \&quot;testuser@mail.com\&quot;            },            {              contactType: \&quot;PHONE\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;FAX\&quot;,              contactValue: \&quot;+551155256325\&quot;            },            {              contactType: \&quot;WEB_ADDRESS\&quot;,              contactValue: \&quot;test.com\&quot;            },         ]      }
     * @param body  (optional)
     * @param userId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersContactsPostAsync(ContactRequestInfo body, String userId, final ApiCallback<Integer> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersContactsPostValidateBeforeCall(body, userId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
