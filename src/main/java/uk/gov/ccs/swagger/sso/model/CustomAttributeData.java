/*
 * CcsSso.OrganisationApi
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package uk.gov.ccs.swagger.sso.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import uk.gov.ccs.swagger.sso.model.ConstructorInfo;
import uk.gov.ccs.swagger.sso.model.CustomAttributeNamedArgument;
import uk.gov.ccs.swagger.sso.model.CustomAttributeTypedArgument;
import uk.gov.ccs.swagger.sso.model.Type;
/**
 * CustomAttributeData
 */


public class CustomAttributeData {
  @SerializedName("attributeType")
  private Type attributeType = null;

  @SerializedName("constructor")
  private ConstructorInfo constructor = null;

  @SerializedName("constructorArguments")
  private List<CustomAttributeTypedArgument> constructorArguments = null;

  @SerializedName("namedArguments")
  private List<CustomAttributeNamedArgument> namedArguments = null;

  public CustomAttributeData attributeType(Type attributeType) {
    this.attributeType = attributeType;
    return this;
  }

   /**
   * Get attributeType
   * @return attributeType
  **/
  @Schema(description = "")
  public Type getAttributeType() {
    return attributeType;
  }

  public void setAttributeType(Type attributeType) {
    this.attributeType = attributeType;
  }

  public CustomAttributeData constructor(ConstructorInfo constructor) {
    this.constructor = constructor;
    return this;
  }

   /**
   * Get constructor
   * @return constructor
  **/
  @Schema(description = "")
  public ConstructorInfo getConstructor() {
    return constructor;
  }

  public void setConstructor(ConstructorInfo constructor) {
    this.constructor = constructor;
  }

   /**
   * Get constructorArguments
   * @return constructorArguments
  **/
  @Schema(description = "")
  public List<CustomAttributeTypedArgument> getConstructorArguments() {
    return constructorArguments;
  }

   /**
   * Get namedArguments
   * @return namedArguments
  **/
  @Schema(description = "")
  public List<CustomAttributeNamedArgument> getNamedArguments() {
    return namedArguments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomAttributeData customAttributeData = (CustomAttributeData) o;
    return Objects.equals(this.attributeType, customAttributeData.attributeType) &&
        Objects.equals(this.constructor, customAttributeData.constructor) &&
        Objects.equals(this.constructorArguments, customAttributeData.constructorArguments) &&
        Objects.equals(this.namedArguments, customAttributeData.namedArguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributeType, constructor, constructorArguments, namedArguments);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomAttributeData {\n");
    
    sb.append("    attributeType: ").append(toIndentedString(attributeType)).append("\n");
    sb.append("    constructor: ").append(toIndentedString(constructor)).append("\n");
    sb.append("    constructorArguments: ").append(toIndentedString(constructorArguments)).append("\n");
    sb.append("    namedArguments: ").append(toIndentedString(namedArguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
